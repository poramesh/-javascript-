app.get('/login', (req, res) => {
    // Handle the GET request to the /login URL
});

What does this do?
  this could be thought as a map 



app.get(): 
This is a method in Express.js that defines a route handler for GET requests.
  
'/login': 
This is the first argument to app.get(). It specifies the URL path that this route will handle. It tells the Express 
application to listen for GET requests at /login.
    
(req, res) => { ... }: 
This is the second argument, an arrow function that serves as the route handler. This function will beexecuted when the
/login route is accessed via a GET request. Inside this function, you can define what should happen when a user or client visits /login.


Function: The arrow function (req, res) => { ... } is the actual function that gets executed when the /login path is requested.
app.get(): This method maps the route path to the handler function.



req (Request)

req is an abbreviation for "request". It represents the HTTP request made by the client (such as a browser or mobile app) to the server.
Type: It is an instance of the http.IncomingMessage class in Node.js and provides information about the HTTP request.

Common Properties and Methods:

req.params: Contains route parameters, which are values specified in the route path (e.g., /users/:id where id is a parameter).
req.query: Contains query string parameters (e.g., /search?q=javascript where q is a query parameter).
req.body: Contains data sent in the body of a POST or PUT request, usually for form submissions or JSON payloads.
req.headers: Contains headers sent by the client, such as Content-Type, Authorization, etc.
req.method: The HTTP method used for the request (e.g., GET, POST).
req.url: The URL of the request.

res (Response)

res is an abbreviation for "response". It represents the HTTP response that will be sent back to the client from the server.
Type: It is an instance of the http.ServerResponse class in Node.js and provides methods to send data back to the client.

Common Properties and Methods:

res.send(): Sends a response to the client. The response can be a string, object, array, etc.
res.json(): Sends a JSON response to the client. Automatically sets the Content-Type to application/json.
res.status(): Sets the HTTP status code for the response (e.g., res.status(404)).
res.set(): Sets response headers.
res.redirect(): Redirects the client to a different URL.
res.render(): Renders a view template and sends the rendered HTML as the response (used with templating engines).

Example Usage in Express.js:

Hereâ€™s a simple example of a route handler using req and res:

app.get('/greet', (req, res) => {
    const name = req.query.name || 'Guest'; // Retrieve 'name' query parameter or default to 'Guest'
    res.send(`Hello, ${name}!`); // Send response back to the client
});

Explanation:

req.query.name: Retrieves the name query parameter from the URL (/greet?name=John would make name equal to 'John').
res.send(): Sends the greeting message back to the client.

Summary:
req (Request): Represents the incoming HTTP request and provides details about the request, such as URL, parameters, headers, and body.
res (Response): Represents the outgoing HTTP response and provides methods to send data, set status codes, and configure response headers.
