Expo Router basics

Expo Router is a file-based routing framework for React Native and web apps. It manages navigation between screens and uses the same
components across multiple platforms. 

To get started, we need to know about the following conventions:

app directory: A special directory containing only routes and their layouts. Any files added to this directory
become a screen inside our native app and a page on the web.

Root layout: The app/_layout.tsx file. It defines shared UI elements such as headers and tab bars so they
are consistent between different routes.

File name conventions: Index file names, such as index.tsx, match their parent directory and do not add a path segment. 
For example, the index.tsx file in the app directory matches / route.

A route file exports a React component as its default value. It can use either .js, .jsx, .ts, or .tsx extension.
Android, iOS, and web share a unified navigation structure.







____________________________________________________________________________________________________


Key Features of Stack in expo-router:

Screen Management:
The Stack allows you to define and navigate between multiple screens.
Each new screen is added on top of the stack, and you can go back to the previous screen by popping the current one.

Routing Integration:
It integrates with the expo-router routing system, which uses a file-based approach. 

Customizable Navigation:
You can customize the header, animations, and behavior for each screen in the stack.
Example: Setting screen-specific options like titles or hiding the header.

Example:
Here’s how the Stack works with expo-router:

// app/layout.js
import { Stack } from "expo-router";

export default function RootLayout() {
  return (
    <Stack
      screenOptions={{
        headerShown: true, // Show headers for all screens
      }}
    />
  );
}

// app/index.js
export default function HomeScreen() {
  return <Text>Home Screen</Text>;
}

// app/details.js
export default function DetailsScreen() {
  return <Text>Details Screen</Text>;
}



How It Works???

File-Based Routing:
app/index.js maps to the home screen.
app/details.js maps to another screen.

Navigation:
When you navigate from the home screen to the details screen, the details screen is pushed onto the stack.
Going back will pop the details screen off the stack.






_____________________________________________




1. Add a new screen to the stack

Let's create a new file named about.tsx inside the app directory. It displays the screen name when the user navigates to the /about route.

app/about.tsx

import { Text, View, StyleSheet } from 'react-native';

export default function AboutScreen() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>About screen</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    justifyContent: 'center',
    alignItems: 'center',
  },
  text: {
    color: '#fff',
  },
});


Inside _layout.tsx:

Add a <Stack.Screen /> component and an options prop to update the title of the /about route.
Update the /index route's title to Home by adding options prop.

app/_layout.tsx

import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ title: 'Home' }} />
      <Stack.Screen name="about" options={{ title: 'About' }} />
    </Stack>
  );
}


What is a Stack?

A stack navigator is the foundation for navigating between different screens in an app. On Android, a stacked route animates on top of 
the current screen. On iOS, a stacked route animates from the right.
Expo Router provides a Stack component to create a navigation stack to add new routes.



2. Navigate between screens

We'll use Expo Router's Link component to navigate from the /index route to the /about route. It is a React component that 
renders a <Text> with a given href prop.

Import the Link component from expo-router inside index.tsx.
Add a Link component after <Text> component and pass href prop with the /about route.
Add a style of fontSize, textDecorationLine, and color to Link component. It takes the same props as the <Text> component.



app/index.tsx

import { Text, View, StyleSheet } from 'react-native';
 import { Link } from 'expo-router'; 

export default function Index() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home screen</Text>
      <Link href="/about" style={styles.button}>
        Go to About screen
      </Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
  button: {
    fontSize: 20,
    textDecorationLine: 'underline',
    color: '#fff',
  },
});





when you click on about, it will display the page is nto found.


3. Add a not-found route

When a route doesn't exist, we can use a +not-found route to display a fallback screen. This is useful when we want to display a
custom screen when navigating to an invalid route on mobile instead of crashing the app or display a 404 error on web.
Expo Router uses a special +not-found.tsx file to handle this case.

1. Create a new file named +not-found.tsx inside the app directory to add the NotFoundScreen component.
2. Add options prop from the Stack.Screen to display a custom screen title for this route.
3. Add a Link component to navigate to the / route, which is our fallback route.




/app/+not-found.tsx

import { View, StyleSheet } from 'react-native';
import { Link, Stack } from 'expo-router';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops! Not Found' }} />
      <View style={styles.container}>
        <Link href="/" style={styles.button}>
          Go back to Home screen!
        </Link>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    justifyContent: 'center',
    alignItems: 'center',
  },

  button: {
    fontSize: 20,
    textDecorationLine: 'underline',
    color: '#fff',
  },
});


To test this, navigate to http:localhost:8081/123 URL in the web browser since it is easy to change the URL path there.
The app should display the NotFoundScreen component:


I SAVED THE FILE WITH _ instead of - and i eneded up going to some strange pAGE wiht site map link and all.



At this point, the file structure of our app directory looks like the following:

app
  _layout.tsx    ->  Root layout
  index.tsx       ->matches route '/'
  about.tsx       ->matches route '/about'
  +not-found.tsx    ->matches route any 404 route





4. Add a bottom tab navigator


We'll add a bottom tab navigator to our app and reuse the existing Home and About screens to create a tab layout (a common navigation pattern in many social 
media apps like X or BlueSky). 
We'll also use the stack navigator in the Root layout so the +not-found route displays over any other nested navigators.

1. Inside the app directory, add a (tabs) subdirectory. This special directory is used to group routes together 
and display them in a bottom tab bar.
2. Create a (tabs)/_layout.tsx file inside the directory. It will be used to define the tab layout,
which is separate from Root layout.
3. Move the existing index.tsx and about.tsx files inside the (tabs) directory. The structure of 


app directory will look like this:

app
 |-- _layout.tsx    ->  Root layout
 |--not-found.tsx    ->matches route any 404 route
 |--(tabs)
    |--_layout.tsx    ->  Tab layout
    |-- index.tsx     ->matches route '/'
    |-- about.tsx     ->matches route '/about'



Update the Root layout file to add a (tabs) route:

/app/_layout.tsx

import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} /> {/*This is how a tab navigator is nested inside a stack navigator, especially when the Root layout is
composed of a parent stack navigator. We're also setting the headerShown option to false to hide the header for the tab navigator. 
Otherwise, there will be two headers displayed on each screen
*/}
      <Stack.Screen name="+not-found" />
    </Stack>
  );
}



app/(tabs)/_layout.tsx

import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen name="index" options={{ title: 'Home' }} />
      <Tabs.Screen name="about" options={{ title: 'About' }} />
    </Tabs>
  );
}


Tabs.Screen component works in a similar way and accepts same props as Stack.Screen component. The only difference is the navigation pattern on the device.

In file-based routing (e.g., Expo Router):
The stack navigator is the root layout.
The tab navigator is nested within a screen of the stack


5. Update bottom tab navigator appearance

Right now, the bottom tab navigator looks the same on all platforms but doesn't match the style of our app. For example, the tab bar or
header doesn't display a custom icon, and the bottom tab background color
doesn't match the app's background color.

Modify the (tabs)/_layout.tsx file to add tab bar icons:

1. Import Ionicons icons set from @expo/vector-icons — a library that includes popular icon sets.
2. Add the tabBarIcon to both the index and about routes. This function takes focused and color as params and renders the icon component. 
From the icon set, we can provide custom icon names.
3. Add screenOptions.tabBarActiveTintColor to the Tabs component and set its value to #ffd33d. This will change the color of the tab bar icon and label when active.



app/(tabs)/_layout.tsx




Tab Navigator:

The Tab.Navigator defines a bottom tab navigator. This creates a tab bar at the bottom of the screen, with i
cons representing the Home and Settings screens.

Screens:

Tab.Screen components correspond to the individual screens within the tab navigator.
The HomeScreen and SettingsScreen are rendered when their respective tabs are selected.

Tab Bar Placement:

By default, the tab bar will be at the bottom of the screen because we are using a bottom
tab navigator (createBottomTabNavigator).
The tabBarIcon controls the appearance of the icon for each tab. It changes based on whether 
the tab is active or inactive, using the color prop.


import { Tabs } from 'expo-router';

import Ionicons from '@expo/vector-icons/Ionicons';


export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: '#ffd33d',
      }}  //There are many screenOptions we can use to customize the tab bar. We're changing the active tab color here to custom value which we will also use later in our app.
    >
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color, focused }) => (
            <Ionicons name={focused ? 'home-sharp' : 'home-outline'} color={color} size={24} /> //The focused param allows us to change a tab's icon and label behavior
when it is active and inactive.
          ),
        }}
      />
      <Tabs.Screen
        name="about"
        options={{
          title: 'About',
          tabBarIcon: ({ color, focused }) => (
            <Ionicons name={focused ? 'information-circle' : 'information-circle-outline'} color={color} size={24}/>
          ),
        }}
      />
    </Tabs>
  );
}

When you define tabBarIcon, React Navigation automatically passes the color prop into it. The color comes from either the active or inactive
state of the tab, depending on whether it is focused.

The Tabs.Navigator or its theme configuration determines the active and inactive colors.
These colors are passed to the tabBarIcon function via the color parameter.
The Ionicons component uses the color to display the appropriate visual style.



Let's also change the background color of the tab bar and header using screenOptions prop:

app/(tabs)/_layout.tsx


<Tabs
  screenOptions={{
    tabBarActiveTintColor: '#ffd33d',
    headerStyle: {
      backgroundColor: '#25292e',
    },
    headerShadowVisible: false,
    headerTintColor: '#fff',
    tabBarStyle: {
    backgroundColor: '#25292e',
    },
  }}
>


In the above code:

The header's background is set to #25292e using the headerStyle property. We have also disabled the header's shadow using headerShadowVisible.
headerTintColor applies #fff to the header label
tabBarStyle.backgroundColor applies #25292e to the tab bar







__________________________________________________________________________________________________________
The tab bar is typically placed at the bottom for bottom tab navigators, and it automatically updates
its appearance based on which tab is selected.

The content for each tab (screen) is shown in the main content area above the tab bar.

React Navigation automatically handles the layout: the tab bar is placed at the bottom, and only the screen corresponding to the selected 
tab is rendered. You can customize the behavior, appearance, and colors of the tab bar and its icons using options.
