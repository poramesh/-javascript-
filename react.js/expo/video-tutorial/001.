Using Expo for React Native Development

Expo:

A tool to make React Native development easier and faster, with:
Pre-built components for navigation, gestures, camera, maps.
Automatic updates without requiring app store reviews.
Focuses on simplifying the development process (no need for Android Studio or Xcode).
Works well with React Native, enabling fast and simple development.
Over-the-air updates.
Expo Router and File-Based Routing
Expo Router simplifies navigation with a file-based routing system.

Setup:

Install Expo CLI: npm install -g expo-cli

Create a new project: npx create-expo-app my-app

Navigate to the project directory and start the development server:

cd my-app
npm start




Setup File-Based Routing:

Install dependencies: npx expo install expo-router react-native-screens react-native-safe-area-context expo-status-bar

Modify package.json:

{
  "main": "expo-router/entry"
}


Create a new folder app and add route files:

app/index.js:

import { View, Text } from 'react-native';

const Home = () => (
    <View>
        <Text>Welcome to Home!</Text>
    </View>
);

export default Home;



Styling in React Native

Using StyleSheet:

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
});

Using Tailwind-like Styling with NativeWind:

import { Text, View } from 'react-native';
import { NativeWindStyleSheet } from 'nativewind';

const App = () => (
    <View className="flex-1 justify-center items-center">
        <Text className="text-blue-500">Hello, Tailwind in React Native!</Text>
    </View>
);




Notes on Setting Up NativeWind and Tailwind CSS with Expo for React Native

Installing NativeWind and Tailwind CSS 

Install NativeWind: npm install nativewind
Install Tailwind CSS as a Dev Dependency: Run the command: npm install --save-dev tailwindcss
Initialize Tailwind CSS: Run the following command to generate the tailwind.config.js file: npx tailwindcss init

Configuring Tailwind
Update tailwind.config.js:

Add the following content configuration to track files for styling:

content: [
    "./app/**/*.{js,jsx,ts,tsx}",
    "./components/**/*.{js,jsx,ts,tsx}"
]

Add Babel Plugin for NativeWind:
Update babel.config.js to include the plugin for NativeWind:

module.exports = {
    presets: ['babel-preset-expo'],
    plugins: ['nativewind/babel'],
};


Restart the Server:
After modifying the Babel configuration, restart the server by pressing R in the terminal.

Applying Tailwind Classes
Replace Stylesheet with Tailwind Classes:

Remove the StyleSheet imports and definitions in your index.jsx file.

Replace style attributes with Tailwind's className. For example:

<Text className="text-3xl text-center">Hello World</Text>


Verify Changes:
Restart the server and ensure the Tailwind styles are being applied.

Setting Up a Tailwind Theme
Extend Colors and Fonts in Tailwind Configuration:

Add custom colors and fonts in tailwind.config.js under the extend section:

theme: {
    extend: {
        colors: {
            primary: "#161622",
        },
        fontFamily: {
            poppins: ["Poppins", "sans-serif"],
        },
    },
},


Import Assets and Fonts:

Download the required assets (e.g., fonts, images) and place them in the assets folder.
Create a constants folder to manage imports for easier access.
Loading Fonts with Expo

Install Fonts:

Use the useFonts hook from expo-font to load the fonts:

import { useFonts } from 'expo-font';

const [fontsLoaded, error] = useFonts({
    'Poppins-Black': require('./assets/fonts/Poppins-Black.ttf'),
    'Poppins-Regular': require('./assets/fonts/Poppins-Regular.ttf'),
});

Handle Font Loading State:

Use a useEffect hook to manage font loading and errors:

useEffect(() => {
    if (error) throw error;
    if (fontsLoaded) SplashScreen.hideAsync();
}, [fontsLoaded, error]);


Final Steps

Test Tailwind Classes:

Use Tailwind classes in your components to apply styles dynamically.
Start Building Your App:
