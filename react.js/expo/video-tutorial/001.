Using Expo for React Native Development

Expo:

A tool to make React Native development easier and faster, with:
Pre-built components for navigation, gestures, camera, maps.
Automatic updates without requiring app store reviews.
Focuses on simplifying the development process (no need for Android Studio or Xcode).
Works well with React Native, enabling fast and simple development.
Over-the-air updates.
Expo Router and File-Based Routing
Expo Router simplifies navigation with a file-based routing system.


Setting Up the Environment



Create a New Expo Project: Run the following command to create a new Expo project

npx create-expo-app my-app





Install dependencies: 

npx expo install expo-router react-native-screens react-native-safe-area-context expo-status-bar

//These dependencies enable features like file-based routing, safe area handling, deep linking, device constants, and status bar management.




Modify entry point, package.json:

{
  "main": "expo-router/entry"
}

Modified the main field in package.json to use expo-router for file-based routing





setup the initial files by Creatin a folder named app and within it, a file named layout.jsx to handle the layout for the application

app/layout.jsx

import { Slot } from 'expo-router';

export default function Layout() {
    return <Slot />;
}



app/index.js:

import { View, Text } from 'react-native';

const Home = () => (
    <View>
        <Text>Welcome to Home!</Text>
    </View>
);

export default Home;



Styling in React Native

Using StyleSheet:

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
});






Modify App Configuration:

Set up deep linking in the app.json by adding a scheme field:

{
  "expo": {
    "scheme": "my-app-scheme"
  }
}



staring the app:

This will start the metro bundler, and a QR code will appear. Use the Expo Go app (available on iOS/Android) to scan the QR code and view the app on your mobile device

npx expo start -c



Using Tailwind-like Styling with NativeWind:

import { Text, View } from 'react-native';
import { NativeWindStyleSheet } from 'nativewind';

const App = () => (
    <View className="flex-1 justify-center items-center">
        <Text className="text-blue-500">Hello, Tailwind in React Native!</Text>
    </View>
);




styling with Setting Up NativeWind and Tailwind CSS with Expo for React Native


Install NativeWind: 

npm install nativewind



Install Tailwind CSS as a Dev Dependency: 

npm install --save-dev tailwindcss




Initialize Tailwind CSS: 
Run the following command to generate the tailwind.config.js file: 

npx tailwindcss init



Configuring Tailwind
Update tailwind.config.js:

Add the following content configuration to track files for styling:

// tailwind.config.js

content: [
    "./app/**/*.{js,jsx,ts,tsx}",
    "./components/**/*.{js,jsx,ts,tsx}"
]

Add Babel Plugin for NativeWind:
Update babel.config.js to include the plugin for NativeWind:

module.exports = {
    presets: ['babel-preset-expo'],
    plugins: ['nativewind/babel'],
};



Applying Tailwind Classes:

Replace Stylesheet with Tailwind Classes so remove the StyleSheet imports and definitions in your index.jsx file.
Replace style attributes with Tailwind's className. 

For example:
<Text className="text-3xl text-center">Hello World</Text>


Verify Changes:
Restart the server and ensure the Tailwind styles are being applied.

Setting Up a Tailwind Theme
Extend Colors and Fonts in Tailwind Configuration:

Add custom colors and fonts in tailwind.config.js under the extend section:

 
//tailwind.config.js

theme: {
    extend: {
        colors: {
            primary: "#161622",
        },
        fontFamily: {
            poppins: ["Poppins", "sans-serif"],
        },
    },
},


Import Assets and Fonts:

Download the required assets (e.g., fonts, images) and place them in the assets folder.
Create a constants folder to manage imports for easier access.

Loading Fonts with Expo
Install Fonts:

Use the useFonts hook from expo-font to load the fonts:

import { useFonts } from 'expo-font';

const [fontsLoaded, error] = useFonts({
    'Poppins-Black': require('./assets/fonts/Poppins-Black.ttf'),
    'Poppins-Regular': require('./assets/fonts/Poppins-Regular.ttf'),
});

Handle Font Loading State:

Use a useEffect hook to manage font loading and errors:

useEffect(() => {
    if (error) throw error;
    if (fontsLoaded) SplashScreen.hideAsync();
}, [fontsLoaded, error]);


and now you may use Tailwind classes in your components to apply styles dynamically.













File-Based Routing in Expo (like Next.js)


Creating Screens:

Create a new file index.jsx for the homepage:

import { Text, View } from 'react-native';

export default function Index() {
    return (
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
            <Text>Aura</Text>
        </View>
    );
}


Creating Navigation (Links):

To navigate between screens, use the Link component from expo-router:

import { Link } from 'expo-router';

export default function Index() {
    return (
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
            <Link href="/profile">Go to Profile</Link>
        </View>
    );
}

When users click the "Go to Profile" link, they are directed to the /profile screen.


Adding More Screens:

To create a profile screen, create profile.jsx in the app folder:

export default function Profile() {
    return <Text>This is the profile page!</Text>;
}



Navigation with Stack in Expo Router


For more complex navigation (like in multi-page apps), you can use Stack navigation:

Using Stack.Screen for navigation:

import { Stack } from 'expo-router';

export default function Layout() {
    return (
        <Stack.Navigator>
            <Stack.Screen name="index" options={{ headerShown: false }} />
            <Stack.Screen name="profile" />
        </Stack.Navigator>
    );
}


Stack.Navigator wraps all your screens, and Stack.Screen defines the individual pages, just like how youâ€™d do it in React Router (for web).


Navigating Between Screens:

Inside index.jsx, use Link to navigate:


import { Link } from 'expo-router';

export default function Index() {
    return (
        <View>
            <Link href="/profile">Go to Profile</Link>
        </View>
    );
}

