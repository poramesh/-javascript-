Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, 
and Next.js for additional features and optimizations.

Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, 
compiling, and more. This allows you to focus on building your application instead of spending time with configuration.

Whether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications.





  
Main Features:

Feature	Description

Routing:
A file-system based router built on top of Server Components that supports layouts, nested routing, loading states, error handling, and more.

Rendering:
Client-side and Server-side Rendering with Client and Server Components. Further optimized with Static and Dynamic Rendering
on the server with Next.js. Streaming on Edge and Node.js runtimes.

Data Fetching:
Simplified data fetching with async/await in Server Components, and an extended fetch API for request memoization, data caching and revalidation.

Styling:
Support for your preferred styling methods, including CSS Modules, Tailwind CSS, and CSS-in-JS

Optimizations:
Image, Fonts, and Script Optimizations to improve your application's Core Web Vitals and User Experience.

TypeScript:
Improved support for TypeScript, with better type checking and more efficient compilation, as well as custom TypeScript Plugin and type checker.








How to set up a new Next.js project



System requirements
Node.js 18.18 or later.
macOS, Windows (including WSL), and Linux are supported.




Automatic installation
We recommend starting a new Next.js app using create-next-app, which sets up everything automatically for you. 
  
To create a project, run:

npx create-next-app@latest

  
On installation, you'll see the following prompts:

Terminal

What is your project named? my-app
Would you like to use TypeScript? No / Yes
Would you like to use ESLint? No / Yes
Would you like to use Tailwind CSS? No / Yes
Would you like your code inside a `src/` directory? No / Yes
Would you like to use App Router? (recommended) No / Yes
Would you like to use Turbopack for `next dev`?  No / Yes
Would you like to customize the import alias (`@/*` by default)? No / Yes
What import alias would you like configured? @/*

*JUST GO WITH THE DEFAULT*

After the prompts, create-next-app will create a folder with your project name and install the required dependencies.



IN CASE IF YOU WANT TO GO WITH MANULA INSTALATION, YOU CAN DO THIS.

Manual installation

To manually create a new Next.js app, install the required packages:

Terminal: npm install next@latest react@latest react-dom@latest

Open your package.json file and add the following scripts:

package.json

{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}

These scripts refer to the different stages of developing an application:

dev: runs next dev to start Next.js in development mode.
build: runs next build to build the application for production usage.
start: runs next start to start a Next.js production server.
lint: runs next lint to set up Next.js' built-in ESLint configuration.



Create the app directory

Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files.
Create an app folder, then add a layout.tsx, and page.tsx file. These will be rendered when the user visits the root of your application (/).


App Folder Structure

Create a root layout inside app/layout.tsx with the required <html> and <body> tags:

app/layout.tsx

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

JS equivalent:

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}


Finally, create a home page - app/page.tsx with some initial content:

app/page.tsx
TypeScript

export default function Page() {
  return <h1>Hello, Next.js!</h1>
}


Good to know:
> If you forget to create layout.tsx, Next.js will automatically create this file when running the development server with next dev.
> You can optionally use a src directory in the root of your project to separate your application's code from configuration files.




Create the public folder (optional)

You can optionally create a public folder at the root of your project to store static assets such as images, fonts, etc. Files inside public 
can then be referenced by your code starting from the base URL (/).


Run the development server

Run npm run dev to start the development server.
Visit http://localhost:3000 to view your application.

Edit theapp/page.tsx file and save it to see the updated result in your browser.

Set up TypeScript:

I installed typesscript globbaly by using this command: npm install -g typescript

Minimum TypeScript version: v4.5.2

Next.js comes with built-in TypeScript support. To add TypeScript to your project, rename a file to .ts / .tsx. Run next dev, Next.js will
automatically install the necessary dependencies and add a tsconfig.json file with the recommended config options.

IDE Plugin
Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.

You can enable the plugin in VS Code by:

Opening the command palette (Ctrl/⌘ + Shift + P)
1. Searching for "TypeScript: Select TypeScript Version"
2. Selecting "Use Workspace Version"
3. TypeScript Command Palette

Now, when editing files, the custom plugin will be enabled. When running next build, the custom type checker will be used.

See the TypeScript configuration page for more information on how to use TypeScript in your project.



Set up ESLint

Next.js comes with built-in ESLint, automatically installing the necessary packages and configuring the proper 
settings when you create a new project with create-next-app.

To add ESLint to an existing project, add next lint as a script to package.json:

package.json

{
  "scripts": {
    "lint": "next lint"
  }
}

Then, run npm run lint and you will be guided through the installation and configuration process.

Terminal

pnpm lint

You'll see a prompt like this:
? How would you like to configure ESLint?

❯ Strict (recommended)
Base
Cancel

Strict: Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration 
for developers setting up ESLint for the first time.

Base: Includes Next.js' base ESLint configuration.

Cancel: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration.

If either of the two configuration options are selected, Next.js will automatically install eslint and eslint-config-next as dependencies in 
your application and create an .eslintrc.json file in the root of your project that includes your selected configuration.

You can now run next lint every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically
run during every build (next build). Errors will fail the build, while warnings will not.





so when i ran the command i got this result:


code-shh\javascript\next_js\documentation\my-app> npm run lint

> my-app@0.1.0 lint
> next lint

✔ No ESLint warnings or errors





Set up Absolute Imports and Module Path Aliases

Next.js has in-built support for the "paths" and "baseUrl" options of tsconfig.json and jsconfig.json files. These options allow you to
alias project directories to absolute paths, making it easier to import modules. 

For example:

// Before
import { Button } from '../../../components/button'
// After
import { Button } from '@/components/button'


To configure absolute imports, add the baseUrl configuration option to your tsconfig.json or jsconfig.json file. 

For example:
tsconfig.json or jsconfig.json

{
  "compilerOptions": {
    "baseUrl": "src/"
  }
}


In addition to configuring the baseUrl path, you can use the "paths" option to "alias" module paths.

For example, the following configuration maps @/components/* to components/*:

tsconfig.json or jsconfig.json

{
  "compilerOptions": {
    "baseUrl": "src/",
    "paths": {
      "@/styles/*": ["styles/*"],
      "@/components/*": ["components/*"]
    }
  }
}

Each of the "paths" are relative to the baseUrl location. For example:

src/app/page.tsx


import Button from '@/components/button'
import '@/styles/styles.css'
 
export default function HomePage() {
  return (
    <div>
      <h1>Hello World</h1>
      <Button />
    </div>
  )
}




MORE ON THIS::



The choice between the two depends on how you want to structure and reference your imports in your project.

Option 1: Specific Aliases

"paths": {
  "@/styles/*": ["styles/*"],
  "@/components/*": ["components/*"]
}



This option:

Creates specific aliases for different directories within your src folder (e.g., @/styles, @/components).

Enables you to import files like this:
import Button from "@/components/Button";
import theme from "@/styles/theme";

Use this if:
You prefer more granularity in your import aliases.
Your src folder contains well-defined subdirectories, and you want to control aliasing for each one separately.


Option 2: General Alias for src

"paths": {
  "@/*": ["./src/*"]
}

This option:
Sets a single alias for the entire src folder.
Enables you to import files relative to the src root:

import Button from "@/components/Button";
import theme from "@/styles/theme";

Use this if:

You want a single alias that applies to all files under src.
You prefer simpler configurations without explicitly specifying individual directory aliases.

Which Should You Use?
Use Option 1:
If you want more control and organization in your project structure.
This approach is better for larger projects where you have multiple folders under src and want to define clear aliases for each.
Use Option 2:
If you prefer simplicity and a single alias for the entire src folder.
This is better for smaller projects or if you don't need fine-grained aliasing.






  
