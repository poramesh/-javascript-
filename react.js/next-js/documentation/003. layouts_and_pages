Next.js uses file-system based routing, meaning you can use folders and files to define routes. This page will guide you 
through how to create layouts and pages, and link between them.


1. Creating a page

A page is UI that is rendered on a specific route. To create a page, add a page file inside the app directory and default export a 
React component. For example, to create an index page (/):

app     => /
 |-page.tsx


app/page.tsx
export default function Page() {
  return <h1>Hello Next.js!</h1>
}


2. CREATING A LAYOUT

A layout is UI shared between multiple pages.
Layouts preserve state, remain interactive, and do not re-render on navigation.
Default export a React component from a layout file.
Use the children prop to render a page or nested layout.

For example, to create a layout that accepts your index page as child, add a layout file inside the app directory:

app     => /
 |-page.tsx
 |-layout.tsx


app/layout.tsx
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )

(or)
app/layout.js

export default function DashboardLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}
}

The layout above is called a root layout because it's defined at the root of the app directory. The root layout is required and must contain html and body tags.


3. Creating a nested route

A nested route is a route composed of multiple URL segments. For example, the /blog/[slug] route is composed of three segments:

/ (Root Segment)
blog (Segment)
[slug] (Leaf Segment)

In Next.js:
Folders are used to define the route segments that map to URL segments.
Files (like page and layout) are used to create UI that is shown for a segment.
To create nested routes, you can nest folders inside each other.
For example, to add a route for /blog, create a folder called blog in the app directory. Then, to make /blog publicly accessible, add a page file:


app     => /
 |-page.tsx
 |-layout.tsx
 |-Blog
    |-page.tsx     => /blog


/app/blog/page.tsx

import { getPosts } from '@/lib/posts'
import { Post } from '@/ui/post'
 
export default async function Page() {
  const posts = await getPosts()
 
  return (
    <ul>
      {posts.map((post) => (
        <Post key={post.id} post={post} />
      ))}
    </ul>
  )
}

You can continue nesting folders to create nested routes. For example, to create a route for a specific blog post, create a new [slug] folder inside blog and add a page file:

app     => /
 |-page.tsx
 |-layout.tsx
 |-Blog      => /blog
    |-page.tsx     
    |-[slug]    => /blog/[slug]
        |-page.js 


app/blog/[slug]/page.tsx
function generateStaticParams() {}
 
export default function Page() {
  return <h1>Hello, Blog Post Page!</h1>
}



*what is [slug]?

In Next.js, a square-bracket notation, like [slug], is used to define dynamic routes. It allows you to
create pages that are dynamically generated based on the values of URL segments.

The word "slug" is a placeholder, and it can represent any variable or parameter in the URL. For example:

If the file path is app/blog/[slug]/page.tsx, it can handle routes like:
/blog/post-1
/blog/post-2
/blog/next-js-tutorial


Common Use Cases for [slug]:

1. Blog Posts: /blog/[slug]
Dynamically generate pages for different blog posts, where slug is the unique identifier (e.g., blog titles).
2. Product Pages: /product/[id]
Create a page for each product, with id representing the product ID.
3. User Profiles: /user/[username]
Generate profile pages for users dynamically based on their usernames.


Suppose you have this dynamic route:

File: app/blog/[slug]/page.tsx
export default function Page({ params }: { params: { slug: string } }) {
  return <h1>Reading Blog Post: {params.slug}</h1>;
}

If you visit /blog/nextjs-tutorial, the page will display:
Reading Blog Post: nextjs-tutorial

*



4. Nesting layouts

By default, layouts in the folder hierarchy are also nested, which means they wrap child layouts via their children prop. You can
nest layouts by adding layout inside specific route segments (folders).

For example, to create a layout for the /blog route, add a new layout file inside the blog folder.

File hierarchy showing root layout wrapping the blog layout


app     => /
 |-page.tsx
 |-layout.tsx
 |-Blog      => /blog
    |-page.tsx  
    |-layout.tsx
    |-[slug]    => /blog/[slug]
        |-page.js 

app/blog/layout.tsx
export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}

[or js]

app/blog/layout.js
export default function BlogLayout({ children }) {
  return <section>{children}</section>
}

If you were to combine the two layouts above, the root layout (app/layout.js) would wrap the blog layout (app/blog/layout.js),
which would wrap the blog (app/blog/page.js) and blog post page (app/blog/[slug]/page.js).



5. Linking between pages

You can use the <Link> component to navigate between routes. <Link> is a built-in Next.js component that extends the HTML <a> 
tag to provide prefetching and client-side navigation.

For example, to generate a list of blog posts, import <Link> from next/link and pass a href prop to the component:

app/ui/post.tsx

import Link from 'next/link'
 
export default async function Post({ post }) {
  const posts = await getPosts()
 
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}

<Link> is the primary and recommended way to navigate between routes in your Next.js application. However, you can also use 
the useRouter hook for more advanced navigation.


How it Works:

getPosts() Function:

Fetches an array of blog posts, where each post has:
slug: Unique identifier used in the URL (e.g., "my-first-post", "another-post").
title: Displayed text for the link (e.g., "My First Post", "Another Post").

Example response from getPosts():

[
  { slug: "my-first-post", title: "My First Post" },
  { slug: "another-post", title: "Another Post" },
];

Generated Links:
The slug is dynamically inserted into the URL /blog/${post.slug}.
Each title is displayed as the link text.

Generated Links (HTML Output):
For the above posts array, the resulting links would be:

<ul>
  <li>
    <a href="/blog/my-first-post">My First Post</a>
  </li>
  <li>
    <a href="/blog/another-post">Another Post</a>
  </li>
</ul>


more example:

Dynamic route file: app/product/[id]/page.tsx
Linking to these product pages:

import Link from 'next/link';

export default function ProductList() {
  const products = [
    { id: 101, name: 'Product A' },
    { id: 102, name: 'Product B' },
  ];

  return (
    <ul>
      {products.map((product) => (
        <li key={product.id}>
          <Link href={`/product/${product.id}`}>{product.name}</Link>
        </li>
      ))}
    </ul>
  );
}
