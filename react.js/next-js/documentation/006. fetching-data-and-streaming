we will learn how we can fetch data in Server Components and Client Components. As well as how to to stream content that depends on data.


Fetching data


lets learn about what is server component and client component:

Server Components are components rendered on the server and sent to the client as static HTML. They do not include JavaScript code
for execution on the client, making them lightweight and highly optimized for performance.
>Server-Side Rendering (SSR)(Rendered on the server, which means they can fetch data, access sensitive server-side resources (like databases or environment variables), 
and then send HTML to the client. Improves performance and reduces JavaScript sent to the client.)
>Static HTML Output( Server Components result in pure HTML sent to the browser. They do not include interactivity by themselves.)
>Automatic by Default (In Next.js 13+, components in the app/ directory are Server Components by default unless specified otherwise.)
>Good for:
Static content.
Pages that rely heavily on server-side data or logic.
Content that doesn't require client-side interactivity.

ex:
// app/page.tsx
export default async function Page() {
  const data = await fetch('https://api.example.com/posts').then((res) => res.json());
  
  return (
    <div>
      <h1>Blog Posts</h1>
      <ul>
        {data.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
}


Client Components are components rendered and hydrated on the client. They include JavaScript and allow for
>interactivity(Enable features like button clicks, form submissions, dropdowns, or any other event-driven behavior.) 
>hydraation(The HTML rendered by the server is "hydrated" with JavaScript so the browser can reattach React logic for interactivity.)
>explicit declarations(Use the "use client" directive at the top of the component file to declare it as a Client Component.)
Good for:
Interactive elements like forms, modals, or real-time updates.
Features that rely on useState, useEffect, or other React client-side hooks.

ex:

// app/components/Button.tsx
'use client';

import { useState } from 'react';

export default function Button() {
  const [count, setCount] = useState(0);

  return (
    <button onClick={() => setCount(count + 1)}>
      Clicked {count} times
    </button>
  );
}


and 
Combining Server and Client Components: Server and Client Components can be used together in the same app. For example:

// app/page.tsx (Server Component)
import Button from './components/Button';

export default async function Page() {
  const data = await fetch('https://api.example.com/posts').then((res) => res.json());

  return (
    <div>
      <h1>Blog Posts</h1>
      <ul>
        {data.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
      <Button /> {/* Client Component */}
    </div>
  );
}

Server Components

You can fetch data in Server Components using: 1. The fetch API 2. An ORM or database

1. With the fetch API
To fetch data with the fetch API, turn your component into an asynchronous function, and await the fetch call. 

For example:
app/blog/page.tsx

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')

//The response is returned as a Response object, which contains metadata about the request (like status code, headers) and the 
response body (the actual data, which might be in JSON, text, or other formats).

const posts = await data.json()

/This posts variable will now hold the actual data returned by the API, and it will typically be in the form of a JavaScript object or array.

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}





Example 1: Array of Blog Posts (JSON format)

[
  {
    "id": 1,
    "title": "How to Build a Blog with Next.js",
    "slug": "how-to-build-a-blog-with-nextjs",
    "author": "John Doe",
    "published_date": "2024-12-15",
    "content": "This post explains how to build a blog using Next.js..."
  },
  {
    "id": 2,
    "title": "Understanding React Components",
    "slug": "understanding-react-components",
    "author": "Jane Smith",
    "published_date": "2024-12-10",
    "content": "In this post, we dive deep into React components..."
  }
]

In this case, posts would be an array of objects, where each object represents a blog post with properties like
id, title, slug, author, published_date, and content.

Example 2: Object Containing Metadata and Posts (JSON format)

{
  "meta": {
    "total_posts": 10,
    "category": "Tech"
  },
  "posts": [
    {
      "id": 1,
      "title": "Building Modern Web Apps",
      "slug": "building-modern-web-apps",
      "author": "Alice Green",
      "published_date": "2024-11-20",
      "summary": "An introduction to modern web app architecture."
    },
    {
      "id": 2,
      "title": "Mastering CSS Grid",
      "slug": "mastering-css-grid",
      "author": "Bob White",
      "published_date": "2024-11-18",
      "summary": "A deep dive into CSS Grid layout system."
    }
  ]
}

Here, posts is an array inside an object, which also contains additional metadata such as meta.total_posts and meta.category. 
This is useful if the API returns not just the data, but also some information about the data itself.

How posts Would Look in JavaScript:

After calling await data.json(), the posts variable would look like this (assuming Example 1 as the structure):

const posts = [
  {
    id: 1,
    title: "How to Build a Blog with Next.js",
    slug: "how-to-build-a-blog-with-nextjs",
    author: "John Doe",
    published_date: "2024-12-15",
    content: "This post explains how to build a blog using Next.js..."
  },
  {
    id: 2,
    title: "Understanding React Components",
    slug: "understanding-react-components",
    author: "Jane Smith",
    published_date: "2024-12-10",
    content: "In this post, we dive deep into React components..."
  }
]

You can then access each post’s information, such as:

console.log(posts[0].title); // "How to Build a Blog with Next.js"
console.log(posts[1].author); // "Jane Smith"




2. With an ORM or database

You can fetch data with an ORM or database by turning your component into an asynchronous function, and awaiting the call:

app/blog/page.tsx

import { db, posts } from '@/lib/db'
 
export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}





Client Components

There are two ways to fetch data in Client Components, using: 1. React's use hook and 2. A community library like SWR or React Query


1. With the use hook

You can use React's use hook to stream data from the server to client. Start by fetching data in your Server component, 
and pass the promise to your Client Component as prop:

app/blog/page.tsx

import Posts from '@/app/ui/posts
import { Suspense } from 'react'
 
export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()
 
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}

Then, in your Client Component, use the use hook read the promise:

app/ui/posts.tsx

'use client'
import { use } from 'react'
 
export default function Posts({ posts }) {
  const posts = use(posts)
 
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}


In the example above, you need to wrap the <Posts /> component in a <Suspense> boundary. This means the fallback will be shown while the promise is being resolved. 
Learn more about streaming.


Community libraries

You can use a community library like SWR or React Query to fetch data in Client Components. These libraries have their own semantics for caching, 
streaming, and other features. 

For example, with SWR:

app/blog/page.tsx

'use client'
import useSWR from 'swr'
 
const fetcher = (url) => fetch(url).then((r) => r.json())
 
export default function BlogPage() {
  const { data, error, isLoading } = useSWR(
    'https://api.vercel.app/blog',
    fetcher
  )
 
  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>
 
  return (
    <ul>
      {data.map((post: { id: string; title: string }) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}






Server Rendering with Streaming in Next.js

Streaming in Next.js is a powerful feature designed to improve the initial load time and user experience by progressively sending parts of a page’s HTML
to the client while the data is being fetched and rendered. This is particularly useful when working with async/await 
in Server Components, which otherwise cause dynamic rendering and block the entire page rendering if any slow data requests occur.

Requirements : The content assumes that the dynamicIO configuration option is enabled in your application. This flag was introduced in Next.js 15 Canary.

How Streaming Works: Streaming allows the server to send HTML chunks progressively instead of blocking the entire route rendering. 
There are two main approaches to implement streaming: 1. Using loading.js and 2. Using React’s <Suspense> component

1. Using loading.js

The loading.js file allows you to define a loading state for your pages or route segments. It streams the layout and a placeholder UI while the data is being fetched and rendered.
Example: Adding loading.js for a Blog Page

Create a loading.js file in the same folder as your page.js file. 
For example:  File Structure:
app/blog/
|-- loading.tsx
|-- page.tsx
|-- layout.tsx

Code: app/blog/loading.tsx

export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>;
}

Behavior
When navigating to the /blog route, users will immediately see the layout UI and the Loading state defined in loading.js.
Once the page.js rendering is complete, the Loading state is replaced with the actual content of the page.

Behind the Scenes

The loading.js file is automatically wrapped in a <Suspense> boundary by Next.js and placed inside layout.js. This ensures the loading UI is shown
until the content of page.js and its children are fully rendered.



2. Using React’s <Suspense>

For more granular control over streaming, you can use the <Suspense> component. This allows you to specify which parts of your UI should be streamed.

Example: Streaming Specific Parts of a Blog Page

Code: app/blog/page.tsx

import { Suspense } from 'react';
import BlogList from '@/components/BlogList';
import BlogListSkeleton from '@/components/BlogListSkeleton';

export default function BlogPage() {
  return (
    <div>
      {/* Content outside Suspense is sent immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Content inside Suspense is streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  );
}

Explanation

Immediate Content: The <header> content is sent to the client immediately because it is outside the <Suspense> boundary.
Streamed Content: The <BlogList> component is inside the <Suspense> boundary. While it is being fetched and rendered, the fallback UI (<BlogListSkeleton>) is shown to the user.


Designing Loading States
Meaningful loading states improve user experience by showing interactive or informative placeholders.

Common patterns include:
Skeleton Loaders: Mimic the structure of the content being loaded.
Spinners or Indicators: Show activity but provide less contextual information.
Partial Previews: Display partial information, such as a title or cover image, while the rest of the content loads.

Summary

With loading.js
Used for route segments (e.g., layouts and pages).
Automatically wraps pages in a <Suspense> boundary.
Streams the entire page while data is fetched.

With <Suspense>
Used for granular control over specific parts of the UI.
Allows selective streaming of components wrapped in <Suspense>.
Provides a fallback UI while data is being fetched.

Why Use Streaming?

Improves Initial Load Time: Sends HTML chunks progressively instead of waiting for the entire page to render.
Better User Experience: Keeps users informed and engaged with meaningful loading states.
