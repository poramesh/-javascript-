


React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React,
add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.

function Greeting({ name }) {
  return <h1>Hello, {name}</h1>;
}

export default function App() {
  return <Greeting name="world" />
}


we can run this on sandboxes like codepen or sandbox provided by react itself, or you can run it locally.

//app.html - open this in the browser.

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Hello World</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
    
      function MyApp() {
        return <h1>Hello, world!</h1>;
      }

      const container = document.getElementById('root');
      const root = ReactDOM.createRoot(container);
      root.render(<MyApp />);

    </script>
    <!--
      Note: this page is a great way to try React but it's not suitable for production.
      It slowly compiles JSX with Babel in the browser and uses a large development build of React.

      Read this page for starting a new React project with JSX:
      https://react.dev/learn/start-a-new-react-project

      Read this page for adding React with JSX to an existing project:
      https://react.dev/learn/add-react-to-an-existing-project
    -->
  </body>
</html>



What’s Happening Behind the Scenes

The <script> tags in the <head> section load React, React DOM, and Babel directly from a Content Delivery Network (CDN).
>React and React DOM handle rendering the components.
>Babel transpiles JSX syntax (<h1>Hello, world!</h1>) into JavaScript that browsers understand.


Limitations of Running Without Node.js

Not Production-Ready:
Transpiling JSX in the browser is slower and not suitable for production.
In production, you'd transpile JSX to JavaScript beforehand using tools like Babel and serve only plain JavaScript.

No Build System:
You won't have access to modern features like hot-reloading, module bundling, or linting.

Browser Support:
This setup depends on a working internet connection to fetch the required libraries from the CDN.




______________________________________

If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered
frameworks popular in the community such as nextjs.

You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems
such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.

By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.




Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even
if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export
(next export output for Next.js, default for Gatsby) at /some-app/ instead.







Add React to an Existing Project



If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack,
and render interactive React components anywhere.

Note:
You need to install Node.js for local development. Although you can try React online or with a simple HTML page, realistically most JavaScript 
tooling you’ll want to use for development requires Node.js.



Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you
want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact,
it’s how most React usage looked at Meta for many years!

You can do this in two steps:

Set up a JavaScript environment that lets you use the JSX syntax, split your code into modules with the import / export syntax, a
nd use packages (for example, React) from the npm package registry.

Render your React components where you want to see them on the page.



Step 1: Set up a modular JavaScript environment 



A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file.
It also lets you use all the wonderful packages published by other developers on the npm registry—including React itself!

If your app is already split into files that use import statements, try to use the setup you already have. 
Check whether writing <div /> in your JS code causes a syntax error.
If it causes a syntax error, you might need to transform your JavaScript code with Babel, and enable the Babel React preset to use JSX.

If your app doesn’t have an existing setup for compiling JavaScript modules, set it up with Vite. 
The Vite community maintains many integrations with backend frameworks, including Rails, Django, and Laravel. 


To check whether your setup works, run this command in your project folder:

npm install react react-dom


//index.js

import { createRoot } from 'react-dom/client';

// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);



/***The document.body.innerHTML = '<div id="app"></div>' clears the HTML content and adds the div that React will use to render your app.
If you already have a div with id="app" in the HTML, you don’t need to clear the body and can directly render the React component into that div.**/



/***The createRoot() function initializes a React root inside the div with id="app". This root will handle rendering the React component inside it.
The getElementById('app') call selects the <div id="app"></div> created in the previous step, and createRoot makes 
it the place where React manages its updates and renders content.**/



/**The render() method is used to render a React element (or component) inside the selected root.**/



Steps to Run This Locally Using Node.js


1. Initialize a New Node.js Project

Open a terminal in your project folder and run:

npm init -y
This creates a package.json file for your project.

2. Install React, React DOM, and Babel

Install React and React DOM:

npm install react react-dom

Install Babel and the necessary presets:

npm install --save-dev @babel/core @babel/preset-react @babel/cli @babel/node

Optionally, install a bundler like Webpack or Vite for better workflows (not strictly necessary for now).

3. Set Up Babel Configuration

Create a .babelrc file in your project folder and add:

{
  "presets": ["@babel/preset-react"]
}

4. Rewrite the HTML/JSX File

Create a file called index.js and move your JSX code into it:

import React from 'react';
import ReactDOM from 'react-dom/client';

function MyApp() {
  return <h1>Hello, world!</h1>;
}

const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render(<MyApp />);


Create an HTML File

Save the following as index.html:

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Hello World</title>
  </head>
  <body>
    <div id="root"></div>
    <script src="bundle.js"></script>
  </body>
</html>

6. Bundle or Transpile the Code

You can use Babel CLI to transpile the JSX into JavaScript:

npx babel index.js --out-file bundle.js

Alternatively, use a bundler like Webpack or Vite to automate this step.
Install a simple HTTP server to serve your files:

npm install --save-dev http-server

Start the server: npx http-server .

Open http://localhost:8080 (or the port displayed) in your browser to see the output.





Step 2: Render React components anywhere on the page 


 you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it)
and add a unique id attribute to any tag, for example:

<!-- ... somewhere in your html ... -->
<nav id="navigation"></nav>
<!-- ... more html ... -->


public/index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>


index.html

<!DOCTYPE html>
<html>
  <head><title>My app</title></head>
  <body>
    <p>This paragraph is a part of HTML.</p>
    <nav id="navigation"></nav>
    <p>This paragraph is also a part of HTML.</p>
  </body>
</html>


src/index.js

import { createRoot } from 'react-dom/client';

function NavigationBar() {
  // TODO: Actually implement a navigation bar
  return <h1>Hello from React!</h1>;
}

const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);


src/style.css

* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  margin: 20px;
  padding: 0;
}

h1 {
  margin-top: 0;
  font-size: 22px;
}

h2 {
  margin-top: 0;
  font-size: 20px;
}

h3 {
  margin-top: 0;
  font-size: 18px;
}

h4 {
  margin-top: 0;
  font-size: 16px;
}

h5 {
  margin-top: 0;
  font-size: 14px;
}

h6 {
  margin-top: 0;
  font-size: 12px;
}

code {
  font-size: 1.2em;
}

ul {
  padding-inline-start: 20px;
}


package.json
{
  "name": "react.dev",
  "version": "0.0.0",
  "main": "/src/index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "^5.0.0"
  },
  "devDependencies": {}
}

This paragraph is a part of HTML.

Hello from React!
This paragraph is also a part of HTML.


just npm install nd then npm start...






Webpack comes into the picture as a module bundler that helps organize and optimize your application's files and assets. React applications,
especially those created with tools like Create React App, use Webpack under the hood to streamline development and production workflows. 
Here’s how Webpack fits into the process:



