
React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, 
you will first break it apart into pieces called components. Then, you will describe the different visual states 
for each of your components. Finally, you will connect your components together so that the data flows through them. 



Start with the mockup 

Imagine that you already have a JSON API and a mockup from a designer.

The JSON API returns some data that looks like this:

[
  { category: "Fruits", price: "$1", stocked: true, name: "Apple" },
  { category: "Fruits", price: "$1", stocked: true, name: "Dragonfruit" },
  { category: "Fruits", price: "$2", stocked: false, name: "Passionfruit" },
  { category: "Vegetables", price: "$2", stocked: true, name: "Spinach" },
  { category: "Vegetables", price: "$4", stocked: false, name: "Pumpkin" },
  { category: "Vegetables", price: "$1", stocked: true, name: "Peas" }
]



6 items or rows or objects(each "item" in the array is a JavaScript object because it contains key-value pairs.) or records in the array with 
four key-value pairs or properties or field

link: https://react.dev/learn/thinking-in-react



There are two types of “model” data in React: props and state. The two are very different:

Props are like arguments you pass to a function. They let a parent component pass data to a child component and customize its appearance. 
For example, a Form can pass a color prop to a Button.

State is like a component’s memory. It lets a component keep track of some information and change it in response to interactions. For example, 
a Button might keep track of isHovered state.


Props and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), 
