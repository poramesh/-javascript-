ScrollReveal is a JavaScript library used to animate elements on your web page as
the user scrolls down. It adds cool effects like fading, sliding, and
zooming when elements come into view.

Step 1: Setting Up ScrollReveal

First, you need to include the ScrollReveal library in your project. You can do this by either downloading
it or including it directly from a CDN (Content Delivery Network).

Here’s an example of how you can include it in your HTML using the CDN:


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ScrollReveal Example</title>
</head>
<body>
  <h1 class="section-title">ScrollReveal Demo</h1>
  <p class="hero-cta">Hello, I will be animated!</p>
  
  <script src="https://unpkg.com/scrollreveal"></script>
  <script>
    // ScrollReveal code goes here
  </script>
</body>
</html>


Step 2: Basic Usage of ScrollReveal

ScrollReveal works by targeting HTML elements with specific classes and applying 
animation effects to them as they come into view.

Let’s apply ScrollReveal to the elements we just added.


<script>
  ScrollReveal().reveal('.section-title', {
    delay: 500, // The animation will start after 500ms
    distance: '50px', // Move 50px when the element appears
    origin: 'left', // The animation will start from the left side
    duration: 1000, // Animation will last for 1 second
  });

  ScrollReveal().reveal('.hero-cta', {
    delay: 1000, // Start after 1000ms
    origin: 'bottom', // Animate from the bottom
    duration: 1000, // 1-second animation
  });
</script>



Step 3: Configuration Options

ScrollReveal gives you many options to customize the animation. Here’s a breakdown of the common options:

delay: How long to wait (in milliseconds) before starting the animation.
distance: How far the element moves from its original position.
origin: The direction from which the animation will start (left, right, top, bottom).
duration: How long the animation will take.
easing: Controls the speed of the animation, such as "ease", "linear", or custom values like "cubic-bezier".
mobile: Set to true or false to enable or disable animations on mobile devices.


Example:

ScrollReveal().reveal('.example-class', {
  distance: '80px',     // Moves the element 80px from the original spot
  origin: 'top',        // Animation starts from the top
  delay: 400,           // Waits 400ms before starting
  duration: 800,        // Animation lasts for 800ms
  easing: 'ease-in-out' // Smooth transition
});




Step 4: Applying to Multiple Elements


You can reveal multiple elements using the same configuration or different configurations 
depending on the design you want.

ScrollReveal().reveal('.section-title', { delay: 300 });
ScrollReveal().reveal('.hero-cta', { delay: 500 });
ScrollReveal().reveal('.footer', { delay: 800 });


Step 5: Using Configuration Files (like scrollRevealConfig.js)

Instead of writing the configuration directly in the JavaScript block, you can import a 
configuration from a separate file, like in the code you shared earlier:

export const defaultProps = {
  easing: "cubic-bezier(0.5, 0, 0, 1)",
  distance: "30px",
  duration: 1000,
  desktop: true,
  mobile: true,
};

export const targetElements = [
  {
    element: ".section-title",
    animation: {
      delay: 300,
      distance: "0px",
      origin: "bottom",
    },
  },
  // more elements...
];

This approach keeps your code more organized, especially if you have many elements to animate. You load the configurations like this:

import { targetElements, defaultProps } from './data/scrollRevealConfig';
import ScrollReveal from 'scrollreveal';

targetElements.forEach((target) => {
  ScrollReveal().reveal(target.element, {
    ...defaultProps,
    ...target.animation,
  });
});

Step 6: Running and Debugging

To see the animations in action, simply scroll down your web page! You can inspect the elements using browser developer 
tools to see if ScrollReveal is applying the right classes and styles. If something doesn’t work, check for typos or misconfigured options.




