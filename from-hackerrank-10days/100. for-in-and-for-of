for...in

Purpose: Used to iterate over the enumerable properties of an object.
Iteration: Iterates over the keys (or property names) of an object.
Applicable To: Objects, Arrays (iterates over array indices as strings).

for (let key in object) {
    console.log(key, object[key]);
}

const person = { name: 'Alice', age: 25, city: 'Wonderland' };

for (let key in person) {
    console.log(key, person[key]);
}

// Output:
// name Alice
// age 25
// city Wonderland

const numbers = [10, 20, 30];

for (let index in numbers) {
    console.log(index, numbers[index]);
}

// Output:
// 0 10
// 1 20
// 2 30


for...of

Purpose: Used to iterate over the values of iterable objects (e.g., arrays, strings, sets, maps).
Iteration: Iterates over the values of the iterable object.
Applicable To: Arrays, Strings, Sets, Maps, other iterable objects (not objects with key-value pairs).

for (let value of iterable) {
    console.log(value);
}

const numbers = [10, 20, 30];

for (let number of numbers) {
    console.log(number);
}

// Output:
// 10
// 20
// 30

const str = 'hello';

for (let char of str) {
    console.log(char);
}

// Output:
// h
// e
// l
// l
// o



key differences:

Iteration Focus:

for...in: Iterates over keys or property names of an object (or array indices as strings). Useful for objects but not ideal for arrays.
for...of: Iterates over values of an iterable object. Ideal for arrays, strings, and other iterable collections.

Iterables vs. Objects:

for...in: Can be used with objects and arrays but is mainly intended for objects. When used with arrays, it iterates over indices (as strings),
which is less intuitive for numeric array values.
for...of: Designed specifically for iterable objects and does not work with plain objects.

Order:

for...in: Does not guarantee the order of iteration for object properties.
for...of: Iterates in the order of the elements in the iterable (e.g., numerical order for arrays).
