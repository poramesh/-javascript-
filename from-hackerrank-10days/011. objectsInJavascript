
Object Basics

Object: A collection of properties.

Property: An association between a name (i.e., key) and a value. Note that when the value associated with a key is a function,
we call the property a method. A property name can be any valid string, or anything that can be converted into a string
(including the empty string).

An object has properties associated with it, and we explain an object's properties as variables that are part of the object. 
We can think of an object's properties as a set of regular variables specific to that object that define its characteristics.


Let's say we have an object named  objectName and a property named propertyName. We can access
this property in the following ways:

Dot Notation: Call objectName.propertyName.

Bracket Notation: Call objectName['propertyName']. 
Note that  propertyName  must be enclosed in string quotes and is case-sensitive. Any property name that's not a valid 
JavaScript identifier (e.g., starts with a number, contains a space or hyphen, etc.) can only 
be accessed using bracket notation. This type of notation is also good to use when property 
names are dynamically determined (i.e., not known until runtime).


/*
 * Create an object with two properties, 'Name' and 'Age'
 */
var actor = {
    Name: 'Julia Roberts', 
    Age: 36
};

// Print the object
console.log('The \'actor\' object:', actor);

// Access object's properties using bracket notation
console.log('The \'Name\' property:', actor['Name']);
console.log('The \'Age\' property:', actor['Age']);

// Access object's properties using dot notation
console.log('The \'Name\' property:', actor.Name);
console.log('The \'Age\' property:', actor.Age);

// Add a new property called 'EyeColor'
actor.EyeColor = 'Brown';

// Print the object
console.log('The updated \'actor\' object:', actor);

// Trying to access undefined property results in 'undefined'
console.log('Attempt to access an undefined property (\'HairColor\'):', 
    actor.HairColor);


O/P:

The 'actor' object: { Name: 'Julia Roberts', Age: 36 }
The 'Name' property: Julia Roberts
The 'Age' property: 36
The 'Name' property: Julia Roberts
The 'Age' property: 36
The updated 'actor' object: { Name: 'Julia Roberts', Age: 36, EyeColor: 'Brown' }
Attempt to access an undefined property ('HairColor'): undefined


Creating Objects:

We can create objects using an object initializer, or we can first create a constructor function and then instantiate an
object using that function's name in conjunction with the new operator.
________________________________
1. Using Object Initializers
_______________________________

We can initialize an object using new Object(), Object.create(), or by using the literal
(or initializer) notation. An object initializer is a comma-separated list of zero or more 
property name-value pairs defining an object, enclosed in curly braces (i.e., {}).


var a = 3;
var b = 'Rome';
var c = false;

var o = {a, b, c};

console.log('Object \'o\':', o);

var p = {
    a: 3, 
    b: 'Rome', 
    c: false
};

console.log('Object \'p\':', p);

var q = {};
console.log('Object \'q\' (Initial):', q);
q.a = a;
q.b = b;
q.c = c;
console.log('Object \'q\' (Updated):', q);

o/p:

Object 'o': { a: 3, b: 'Rome', c: false }
Object 'p': { a: 3, b: 'Rome', c: false }
Object 'q' (Initial): {}
Object 'q' (Updated): { a: 3, b: 'Rome', c: false }

______________________
using new Object()
______________________

var o = new Object();

o.a = 4;
o.b = 'Rome';
o.c = true;

console.log('Object \'o\':', o);

o/p:

Object 'o': { a: 4, b: 'Rome', c: true }


______________________
Using Object.create()
______________________


var x = {
    a: 5, 
    foo: function() {
        return this.a * this.a;
    }
};

var o = Object.create(x);

console.log('\'x\':', x);
console.log('Object \'o\':', o);
console.log('Property \'o.a\':', o.a);
console.log('Method \'o.foo()\':', o.foo());

o.a = 7;

console.log('Property \'o.a\':', o.a);
console.log('Method \'o.foo()\':', o.foo());

o/p:

'x': { a: 5, foo: [Function: foo] }
Object 'o': {}
Property 'o.a': 5
Method 'o.foo()': 25
Property 'o.a': 7
Method 'o.foo()': 49

THE ABOVE PROGRAM IN PYTHON:
 since Python dictionaries do not directly support methods like objects in JavaScript, you'd 
typically use a class for such a structure. But if you want to keep it close to the dictionary approach, here's how you could write it:

# Define a function that acts like the 'foo' method
def foo(x):
    return x['a'] * x['a']

# Create a dictionary with a key 'a' and a method 'foo'
x = {
    'a': 5,
    'foo': lambda: foo(x)
}

# Access the function and print the result
print(x['foo']())  # Outputs: 25


2. USING A CONSTRUCTOR FUNCTIONNNN


We can use a constructor function to create an object in two steps:

1. Define the object type by writing a constructor function. The strong convention here is
for the function's name to be in UpperCamelCase.
2. Use the new operator to create an instance of the object.

function Actor(firstName, lastName, Age) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.Age = Age;
}

var a1 = new Actor('Julia', 'Roberts', 48);
var a2 = new Actor('Kate', 'Winslet', 40);

console.log('Object \'a1\':', a1);
console.log('Object \'a2\':', a2);


o/p;


Object 'a1': Actor { firstName: 'Julia', lastName: 'Roberts', Age: 48 }
Object 'a2': Actor { firstName: 'Kate', lastName: 'Winslet',Age:40 }


PROBLEM:::


Sample Input
4
5

Sample Output 
4
5
18
20

Explanation 
Given a length of a=4 and a width of b=5, 
the Rectangle object's perimeter is 
4+4+5+5=18 and its area is 4*5=20.


function Rectangle(a, b) {
  return {
    length: a,
    width: b,
    perimeter: 2 * (a + b),
    area: a * b,
  };
}

function main() {
    const a = +(readLine());
    const b = +(readLine());
    
    const rec = new Rectangle(a, b);
    
    console.log(rec.length);
    console.log(rec.width);
    console.log(rec.perimeter);
    console.log(rec.area);
}

(or)

function Rectangle(a,b) {
    this.length = a;
    this.width = b;
    this.perimeter = 2 * (a + b);
    this.area = a * b);
    }

(or)

function Rectangle(a, b) {
   const rectangle = {
      length: a,
      width: b ,
      perimeter : 2 * (a + b),
      area : a * b
      };
      
    return rectangle
}
