Template literals (formerly known as template strings) are string literals that allow for embedded expressions. 

A template literal can contain placeholders, which are preceded by a dollar sign ($) and wrapped in curly braces ({}).
For example, in the template literal `${expression}`


Print a Multi-Line String Using Normal Strings

console.log("first line\n" + "second line");
console.log("first line" + "\nsecond line");
console.log("first line\nsecond line");

o/p:
first line
second line
first line
second line
first line
second line


Print a Multi-Line String Using Template Literals

Regardless of which approach we choose, the output is the same.

console.log(`first line
second line`);

o/p:
first line
second line



Expression Interpolation


Print a Line Using Normal Strings


const a = 2;
const b = 3;

console.log(
    'The sum of a and b is ' + (a + b) + '.\n' 
    + 'The product of a and b is ' + (a * b) + '.'
);

o/p:

The sum of a and b is 5.
The product of a and b is 6.


Print a Line Using Template Literals


const a = 2;
const b = 3;

console.log(`The sum of a and b is ${a + b}. 
The product of a and b is ${a * b}.`);

o/p;
The sum of a and b is 5. 
The product of a and b is 6.



Tagged Template Literals


Tagged template literals allow us to use a function to modify the output of a template literal. In this construct:

1. The first argument contains an array of string literals.
2. The subsequently processed arguments are the values of the substitution expressions.

After processing all the arguments, the function returns the manipulated string.


var a = 5;
var b = 10;

function foo(strings, ...values) {
    console.log("." + strings[0] + ".");
    console.log("." + strings[1] + ".");
    console.log("." + strings[2] + ".");
    console.log("." + strings[3] + ".");
    console.log(values[0]);
    console.log(values[1]);
    console.log(values[2]);
}

foo`Sum ${a + b}
Product ${a * b}
Division ${b / a}`;

o/p:
.Sum .
.
Product .
.
Division .
..
15
50
2

Now we can see that, the total number of string literals is one more than the number of total cooked expressions. The first string 
literal is the string before the first cooked expression, the last string literal is the string after the last
cooked expression and other literals are in between the cooked expressions.


We can also return from tagged templates:


var a = 5;
var b = 10;

function foo(strings, ...values) {
    let a = values[0];
    let b = values[1];

    return `Sum ${a + b}
           Product ${a * b} 
           Division ${b / a}`;
}

console.log(foo`Num1 ${a + 10}
Num2 ${b * 2} 
Num3 ${b / a}`);

o/p:
Sum 35
Product 300 
Division 1.3333333333333333


Breaking it Down:
Template Literal:
The strings array will capture ["Num1 ", "\nNum2 ", "\nNum3 ", ""].
The values array will capture the results of the interpolations: [(a + 10), (b * 2), (b / a)].
With a = 5 and b = 10, the expressions evaluate to:
a + 10 = 15
b * 2 = 20
b / a = 2
So, values becomes [15, 20, 2].

Inside the foo function:
let a = 15;
let b = 20;





problem:
Input Format
The first line contains an integer denoting s1.
The second line contains an integer denoting s2.

Output Format

Return an array consisting of s1 and s2, sorted in ascending order. after performing this operation:
const s1 = (p + Math.sqrt(p**2 - 16*a)) / 4;
const s2 = (p - Math.sqrt(p**2 - 16*a)) / 4;

Sample Input 0

10
14

Sample Output 0

10
14




function sides(literals, ...expressions) {
    const [a, p] = expressions;
    const root = Math.sqrt((p*p)-(16*a))
    const s1 = (p + root)/4;
    const s2 = (p - root)/4;
    return ([s2, s1]); //return [s1, s2].sort();

}


(or)


I solved it like this haha 
function sides(literals, ...expressions) {
    let a = expressions[0]
    let p = expressions[1]
    let array = []
    
    const s1 = (p + Math.sqrt(p**2-16*a))/4
    const s2 = (p - Math.sqrt(p**2-16*a))/4
    //console.log(s1,s2)
    array.push(s2)
    array.push(s1)
    //console.log(array)
    return  array
    
}


function main() {
    let s1 = +(readLine());
    let s2 = +(readLine());
    
    [s1, s2] = [s1, s2].sort();
    
    const [x, y] = sides`The area is: ${s1 * s2}.\nThe perimeter is: ${2 * (s1 + s2)}.`;
    
    console.log((s1 === x) ? s1 : -1);
    console.log((s2 === y) ? s2 : -1);
}

