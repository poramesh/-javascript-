Arrays
The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.

_________________
creating an array:
_________________

var a = ['first', 'second'];

console.log('a\'s contents:', a); //a's contents: [ 'first', 'second' ]
console.log('a\'s length:', a.length); //a's length: 2

____________________________________
Access (Index Into) an Array Item
_________________________________

let a = ['first', 'second'];

// first = 'first'
let first = a[0]; 

// last = 'second'
let last = a[a.length - 1]; 

console.log('a[0]:', first); //first
console.log('a[a.length - 1]:', last); //second

________________________
Loop Over an Array
_________________________
var a = ['first', 'second'];

a.forEach(function(e, i, array) {
    // 'i' is the index
    // 'e' is the element
    console.log(i + ' ' + e);
});
//
0: first
1: second
____________________
Append to the end of array
_________________

var a = ['first', 'second'];

// Append 'third' to array 'a'
a.push('third');

console.log('a:', a); #a: [ 'first', 'second', 'third' ]

________________________________
Remove From the end of an Array
_______________________________

var a = ['first', 'second', 'third'];
console.log('Original Array:', a);

// Remove the last element from the array
let removed = a.pop();

console.log('Modified Array:', a);
console.log('Removed Element:', removed);

o/p
Original Array: [ 'first', 'second', 'third' ]
Modified Array: [ 'first', 'second' ]
Removed Element: third

_________________________
Remove from the front of the array
__________________________________

var a = ['first', 'second', 'third'];
console.log('Original Array:', a);

// Remove the first element from the array
let removed = a.shift();

console.log('Modified Array:', a);
console.log('Removed Element:', removed);

o/p
Original Array: [ 'first', 'second', 'third' ]
Modified Array: [ 'second', 'third' ]
Removed Element: first


__________________________________
add to the front of the array
______________________________

var a = ['first', 'second', 'third'];
console.log('Original Array:', a);

// Insert element at the beginning of the array
a.unshift('fourth');

console.log('Modified Array:', a);


o/p;

Original Array: [ 'first', 'second', 'third' ]
Modified Array: [ 'fourth', 'first', 'second', 'third' ]

_____________________________________
Find the Index of an Item in the Array
______________________________________

var a = ['first', 'second', 'third', 'fourth'];

let position = a.indexOf('second');

console.log('a:', a);
console.log('position:', position);

o/p:
a: [ 'first', 'second', 'third', 'fourth' ]
position: 1

___________________________________
Remove an Item by Index Position
________________________________

var a = ['first', 'second', 'third', 'fourth', 'fifth'];
console.log('Original Array:', a); //['first', 'second', 'third', 'fourth', 'fifth']
let position = 1;
let elementsToRemove = 2;
// Remove 'elementsToRemove' element(s) starting at 'position'
a.splice(position, elementsToRemove);//['first','fourth', 'fifth']

console.log('Modified Array:', a);


_______________
Copy an Array
____________

var a = ['first', 'second', 'third', 'fourth'];
console.log('a:', a);
// Shallow copy array 'a' into a new object
let b = a.slice();
console.log('b:', b); //['first', 'second', 'third', 'fourth'];


__________________________
Iterate Over an Array
_________________________
We can use the for…of statement to iterate over an array. This type of statement creates a loop that lets you iterate over iterable objects such as Array, 
String, Set, and Map.

var a = ['first', 'second', 'third', 'fourth'];
for (let e of a) {
    console.log('e:', e);
}

o/p:

e: first
e: second
e: third
e: fourth

__________________
Sort an Array
___________________

In JavaScript, the sort() method is used to sort the elements of an array in place, meaning it modifies the original array.
By default, sort() converts the elements into strings and sorts them in ascending order according to the Unicode code points of the characters.


Basic Usage of sort()
_____________________

let fruits = ['apple', 'banana', 'cherry', 'date'];
fruits.sort();
console.log(fruits); // Output: ['apple', 'banana', 'cherry', 'date']


Sorting Numbers
________________

By default, sort() treats array elements as strings, which can lead to unexpected results when sorting numbers:

let numbers = [10, 1, 21, 2];
numbers.sort();
console.log(numbers); // Output: [1, 10, 2, 21]

This happens because sort() compares the elements as strings: '10' comes before '2' in Unicode order.


Custom Sorting with a Compare Function
______________________________________

To sort numbers (or any other custom sort criteria), you should provide a compare function to sort().

How the Compare Function Works
___________________________________________________________________________________
The compare function takes two arguments (let's call them a and b) and returns:

A negative number if a should come before b. ( SSTAY WHEREEVER YOU ARE (NO SWAP))
Zero if a and b are considered equal.
A positive number if a should come after b. (POSTINVE - SWAPPPPP)


A-B IS FOR ASCENDING (SMALLER TO BIG)
B-A IS FOR DESCENDING(BIIGGER TO SMALL) - AND ULTA IS FOR DESCENDING





___________________________________________________________________________

 Sorting Numbers in Ascending Order

let numbers = [10, 1, 21, 2];
numbers.sort((a, b) => a - b);
console.log(numbers); // Output: [1, 2, 10, 21]

10-1 = 9 (+)
1, 10


const array = [5, 2, 9, 1, 5, 6];
array.sort((a, b) => {
  if (a < b) return -1;
  if (a > b) return 1;
  return 0; // a and b are equal
});
console.log(array); // Output: [1, 2, 5, 5, 6, 9]



Sorting Numbers in Descending Order

let numbers = [10, 1, 21, 2];
numbers.sort((a, b) => b - a);
console.log(numbers); // Output: [21, 10, 2, 1]

1-10 = -9 (-)

Sorting Strings Alphabetically

The default behavior of sort() works well for strings, but if you want case-insensitive sorting or sorting
based on different locales, you can use a custom compare function.

Example: Case-Insensitive Sorting

let words = ['Banana', 'apple', 'cherry', 'date'];
words.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
console.log(words); // Output: ['apple', 'Banana', 'cherry', 'date']


words.sort((a, b) => b.toLowerCase().localeCompare(a.toLowerCase()));
console.log(words);  // Output: ["date", "Cherry", "Banana", "apple"]

so basically it converts to lower case and then performs the a-b or b-a operation haha 

Example: Sorting Strings Based on Locale

let words = ['réservé', 'premier', 'café', 'apple'];
words.sort((a, b) => a.localeCompare(b));
console.log(words); // Output: ['apple', 'café', 'premier', 'réservé']

words.sort((a, b) => a.localeCompare(b));
console.log(words);  // Output: ["Banana", "Cherry", "apple", "date"]

words.sort((a, b) => b.localeCompare(a));
console.log(words);  // Output: ["date", "apple", "Cherry", "Banana"]


Characters are compared based on their position in the character set. For example, in ASCII:
'A' (ASCII 65) < 'B' (ASCII 66)
'a' (ASCII 97) < 'b' (ASCII 98)

Ascending Order:

"apple" < "banana" because 'a' < 'b'.
"banana" < "cherry" because 'b' < 'c'.
The result is ["apple", "banana", "cherry"].


Sorting Objects by a Property

When working with an array of objects, you can sort the objects by a specific property.

Example: Sorting an Array of Objects

let people = [
    { name: 'Alice', age: 25 },
    { name: 'Bob', age: 30 },
    { name: 'Charlie', age: 20 }
];

// Sort by age in ascending order
people.sort((a, b) => a.age - b.age);
console.log(people);
// Output: [{ name: 'Charlie', age: 20 }, { name: 'Alice', age: 25 }, { name: 'Bob', age: 30 }]

Stability of sort()

JavaScript's sort() method is stable in most modern implementations, meaning if two elements are considered 
equal according to the compare function, their original order is preserved in the sorted array. This is 
important when sorting complex data where you might want to sort by multiple criteria sequentially.

Summary
Default Sorting: Converts elements to strings and sorts based on Unicode code points.
Custom Sorting: Use a compare function to sort elements based on custom criteria, such as numerical sorting or sorting objects by a property.
Sort is In-Place: The original array is modified by sort().
Stability: Most modern JavaScript engines provide stable sorting.
Understanding and effectively using sort() with custom compare functions can help you manipulate arrays more powerfully in JavaScript.


________________________________________________________________________________________________________

problem:


Sample Input 
5
A = 2 3 6 6 5
Sample Output 
5

Explanation 
Given the array A, we see that the largest value in the array is 6 and the second largest value is 5. Thus, we return 5  as our answer.

Solution:

function getSecondLargest(nums) { 

let first = nums[0]; let second = -1;

for (let i = 0; i < nums.length; i++) {


    if (nums[i] > first) {
        second = first;
        first = nums[i]
    }

    if (nums[i] > second && nums[i] < first) {
        second = nums[i];
    }
}
return second;
}


const nums = [10, 5, 10, 8, 6];

Step-by-Step Execution

Initial values: first = -Infinity, second = -Infinity.

First Iteration (i = 0)
nums[0] is 10.
Since 10 > first (i.e., 10 > -Infinity), we update:
second = first (so second becomes -Infinity).
first = 10.
Current values: first = 10, second = -Infinity.

Second Iteration (i = 1)
nums[1] is 5.
Since 5 < first (i.e., 5 < 10), we check the else if condition:
5 > second (i.e., 5 > -Infinity), so we update second = 5.
Current values: first = 10, second = 5.

Third Iteration (i = 2)
nums[2] is 10.
Since 10 == first (i.e., 10 == 10), neither first nor second is updated.
Current values: first = 10, second = 5.

Fourth Iteration (i = 3)
nums[3] is 8.
Since 8 < first (i.e., 8 < 10), we check the else if condition:
8 > second (i.e., 8 > 5), so we update second = 8.
Current values: first = 10, second = 8.

Fifth Iteration (i = 4)
nums[4] is 6.
Since 6 < first (i.e., 6 < 10), we check the else if condition:
6 > second (i.e., 6 > 8) is false, so second remains unchanged.
Final values: first = 10, second = 8.



(or)

return [...new Set(nums)].sort((a,b) => b-a)[1];

(or)

const unique = Array.from(new Set(nums));
const reverseSorted = unique.sort(function(a, b){return b - a})
const second = reverseSorted[1];
return (second);


