________________
String Basics
________________

we can basically use \" to treat it as a string or soemthing like that. or else ti will be an error.

function main(pooja) {
    console.log(" \" \" " + pooja + " \" \" "); // " " hello " " 
    console.log("' + pooja + '"); //' + pooja + '
    console.log(pooja.length); //5
}

var pooja = 'hello'
main(pooja)

___________________
String Constructor
___________________

To create a new string, we use the syntax String(value) where  denotes the data we want to turn into a string.

var myNumber = 4;
var myString = String(myNumber);

console.log(myNumber + " is a " + typeof myNumber); //4 is a number
console.log(myString  + " is a " + typeof myString); //4 is a string

____________
methods
___________

s.charAt(): Returns the character at the specified index. For example:

var s = "HackerRank";
var i = 2
console.log(s.charAt(i)); // c


String.concat():Returns a new string consisting of the calling string concatenated with another string passed as an argument.


var s = "Hacker";
var t = "Rank";
var u = s.concat(t);
console.log(s + " " + t); // Hacker Rank
console.log(u); Hacker Rank


String.includes(): Returns a boolean denoting whether a string passed as an argument exists within the calling string. For example:

var s = "HackerRank"; 
console.log(s.includes() + " " + s.includes("")); // false true
console.log(s.includes("hack") + " " + s.includes("Hack")); // true true

String.endsWith(): Returns a boolean denoting whether the calling string ends with the characters of another string passed as an argument. For example:

var s = "HackerRank"; 
console.log(s.endsWith() + " " + s.endsWith("")); //false true
console.log(s.endsWith("rank") + " " + s.endsWith("Rank")); //false true

s.endsWith() is not given any arguments, which is not valid usage. This will result in a TypeError because endsWith() requires at least one argument.
s.endsWith("") checks if the string s ends with an empty string. Since every string ends with an empty string, this will always return true.


String.indexOf(): Returns an integer denoting the index within the calling String object of the first occurrence of the given argument:

If the argument isn't found in the string or no argument was passed to the function, it returns -1.
If an integer is passed as a second argument, it will start searching the string from the index denoted by the integer.

var s = "HackerRank";
console.log(
    s.indexOf("a") + " " 
    + s.indexOf("a", s.length) + " " 
    + s.indexOf("a", 6)
); // 1 -1, 7
console.log(
    s.indexOf("an") + " " 
    + s.indexOf("x") + " " 
    + s.indexOf("")
); //7 -1 0

String.lastIndexOf(): Returns an integer denoting the index within the calling String object of the last occurrence of the given argument:

If the argument isn't found in the string or no argument was passed to the function, it returns -1.
If an integer is passed as a second argument, it will search the string backward starting from the index denoted by the integer.

var s = "HackerRank";
console.log(
    s.lastIndexOf("a") + " " 
    + s.lastIndexOf("a", s.length) + " " 
    + s.lastIndexOf("a", 6)
); //7 7 1
console.log(
    s.lastIndexOf("ac") + " " 
    + s.lastIndexOf("x") + " " 
    + s.lastIndexOf("")
); //1 -1 10


String.match()

Match a regular expression passed as an argument against the calling string. If a match is 
found, it returns an object with three properties: the matched substring, the index it was 
found at, and the input (i.e., the initial string); if no match is found, it returns null. 

var s = "HackerRank";
console.log(s.match()); //[ '', index: 0, input: 'HackerRank', groups: undefined ]
console.log(s.match("[a-z]+")); //[ 'acker', index: 1, input: 'HackerRank', groups: undefined ]


String.repeat():

Returns a string consisting of the elements of the calling String object repeated some number of times (given as an integer argument).
If no argument or a  argument are given, then it returns the empty string.

var s = "HackerRank";
console.log(s.repeat () + "x" + s.repeat(0)); //x
console.log(s.repeat(2)); // HackerRankHackerRank

String.replace()

Finds a match between a regular expression and a string, then returns a string where the
first matched substring is replaced with a new substring. If no match is found, the returned string is the 
same as the original string. 

var s = "HackerRank";
console.log(s.replace() + " " + s.replace("a", "")); //HackerRank HckerRank
1
var s = "HackerRank";


String.search()

Executes the search for a match between a regular expression and a specified string, then 
returns the index of the first character of the first match. For example:

var s = "HackerRank";
console.log(s.search() + " " + s.search("[a-z]")); // 0 7
console.log(s.search("a") + " " + s.search("an")); // 1 7


String.slice()

Extracts a section of a string and returns it as a new string. The extracted section depends on the arguments passed to the 
function:
var s = "HackerRank";
console.log(s.slice(0, 6) + " " + s.slice(6)); //Hacker Rank
console.log(
    s.slice() + " " 
    + s.slice(-4, 8) + " " 
    + s.slice(-4, -2)
); // HackerRank Ra Ra


String.split()

Splits a String object into an array of strings by separating the string into substrings:

If no argument is given, it returns an array containing the original string.
If the empty string is passed as an argument, it returns an array of the string's individual letters.
If a string consisting of one or more letters is passed as an argument, it splits the string 
at each occurrence of that string and returns an array of the split substrings.

var s = "HackerRank";
console.log(s.split(""));
console.log(s.split("k"));
console.log(s.split());

[
  'H', 'a', 'c', 'k',
  'e', 'r', 'R', 'a',
  'n', 'k'
]
[ 'Hac', 'erRan', '' ]
[ 'HackerRank' ]



String.startsWith()

Returns a boolean denoting whether a string begins with the characters of another string 
passed as an argument. 

var s = "HackerRank";
console.log(s.startsWith("Hack")); //t
console.log(s.startsWith("Hacks")); //f


String.substr() is same String.substring()

Returns a substring consisting of characters in a given range, depending on the arguments passed to the function:

If no arguments are passed to the function, it returns the entire string.
If one integer argument, , is passed to the function, it returns a substring starting at index  and ending at the end of the string.
If two integer arguments,  and , are passed to the function, it returns a substring consisting of characters in the range ;
in other words, this is a substring starting at index  and ending at .

var s = "HackerRank";
console.log(s.substr()); //HackerRank
console.log(s.substr(0, 6) + " " + s.substr(6));  //Hacker Rank

String.toLowerCase()

Returns the calling string's value, converted to lowercase letters. For example:

var s = "HackerRank";
s = s.toLowerCase();
console.log(s); //hacekrank

String.toUpperCase()

Returns the calling string's value, converted to uppercase letters. For example:

var s = "HackerRank";
s = s.toUpperCase();
console.log(s); //HACKERANK

string.trim()

var s = "    HackerRank    ";
console.log("Original Length: " + s.length); //18
s = s.trim();
console.log("Trimmed Length: " + s.length); //10


String.trimLeft()

Returns the string with the whitespace trimmed from its left side. For example:

var s = "    HackerRank    ";
console.log("Original Length: " + s.length);
s = s.trimLeft();
console.log("Trimmed Length: " + s.length);

RunOutput
Original Length: 18
Trimmed Length: 14

String.trimRight()

Returns the string with the whitespace trimmed from its right side. For example:

var s = "    HackerRank    ";
console.log("Original Length: " + s.length);
s = s.trimRight();
console.log("Trimmed Length: " + s.length);

Original Length: 18
Trimmed Length: 14
