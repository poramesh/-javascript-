Middleware in Node.js


Middleware refers to functions that have access to the request object (req), the response object (res), and the next function (next) 
in the application’s request-response cycle. Middleware can be used to execute code, modify requests and responses, end the request-response cycle,
or call the next middleware function in the stack.


While middleware is a core concept in Express.js, the concept can also be implemented in plain Node.js.

Core Idea of Middleware in Node.js

A middleware function: Processes incoming requests before they reach the intended handler or route.
Can either:
Pass control to the next middleware or route handler by calling next().
End the request-response cycle by sending a response.


Middleware is often used for:
Logging
Authentication
Parsing request bodies
Error handling
Serving static files




Here’s how middleware behaves in a typical Node.js application:

Intercept the Request: Middleware intercepts the HTTP request.
Perform Operations: Middleware performs operations such as validating a token, logging, or modifying the request.
Pass Control: Middleware decides whether to pass the control to the next function (next()) or to terminate the request-response cycle.
Middleware Without a Framework (Plain Node.js)


You can implement middleware behavior manually using the http module:

Example:

const http = require('http');

// Middleware function
function logger(req, res, next) {
    console.log(`${req.method} ${req.url}`);
    next(); // Pass control to the next handler
}

// Middleware-like flow
const server = http.createServer((req, res) => {
    logger(req, res, () => {
        // Final response handler
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('Hello from Node.js!');
    });
});

// Start the server
server.listen(3000, () => {
    console.log('Server running at http://localhost:3000/');
});

In this example:

The logger function logs the HTTP method and URL.
After logging, it calls next() to proceed to the next function in the chain.




Middleware in Express.js

In Express.js, middleware is built into the framework, making it easier to define and use. It automates chaining middleware
functions and simplifies their integration into the request-response cycle.

Types of Middleware in Express:

Application-Level Middleware: Applied to all or specific routes using app.use() or app.METHOD().
Router-Level Middleware: Used specifically for a router instance.
Error-Handling Middleware: Handles errors using four arguments: (err, req, res, next).
Built-in Middleware: Predefined middleware like express.json() and express.static().
Third-Party Middleware: Middleware from libraries, such as morgan for logging or cors for cross-origin resource sharing.

Example: Express Middleware

const express = require('express');
const app = express();

// Custom middleware function
function logger(req, res, next) {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    next(); // Pass control to the next middleware or route handler
}

// Use the logger middleware
app.use(logger);

// Define a route
app.get('/', (req, res) => {
    res.send('Hello, World!');
});

// Start the server
app.listen(3000, () => {
    console.log('Server running at http://localhost:3000/');
});



Key Concepts of Middleware in Node.js

Execution Order: Middleware functions are executed in the order they are defined. If next() is not called, 
the request-response cycle terminates at that middleware.

next() Function:

Transfers control to the next middleware or route handler.
If next() is not called, no further middleware or routes will execute.
Chaining Middleware: You can define multiple middleware functions in sequence, each performing a specific task.

Example of Middleware Chaining:

app.use((req, res, next) => {
    console.log('Middleware 1');
    next(); // Pass control to the next middleware
});

app.use((req, res, next) => {
    console.log('Middleware 2');
    next(); // Pass control to the next middleware
});

app.get('/', (req, res) => {
    res.send('Hello from the final route!');
});

