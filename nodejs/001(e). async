Synchronous Operations
Synchronous operations execute sequentially, one after another. Each operation must complete before the next one starts.

Characteristics:
Blocking: The program waits for each operation to complete before moving on to the next one. This can lead to delays if an operation is 
time-consuming, such as reading a file or making a network request.
Predictable Flow: Code execution happens in a predictable, linear order, which can be easier to reason about.

Example:

const fs = require('fs');

const data = fs.readFileSync('file.txt', 'utf8');
console.log(data); // This line executes only after the file read is complete
console.log('This will print after the file read');


Asynchronous Operations

Asynchronous operations allow other code to run while waiting for an operation to complete. They do not block the execution flow.

Characteristics:
Non-blocking: The program can continue executing other code while waiting for the asynchronous operation to finish. This is useful 
for tasks like network requests or file I/O that take time.
Complex Flow: Requires handling callbacks, promises, or async/await syntax to manage the execution flow and handle results or errors.

Example:
_________________
Using Callbacks:
__________________
const fs = require('fs');

// Asynchronous file read
fs.readFile('file.txt', 'utf8', (err, data) => {
  if (err) throw err;
  console.log(data); // This line executes after the file read is complete
});

console.log('This will print immediately after initiating the file read');


this is how it would look like in sync:


function doSomethingSync(callback) {
  // Synchronous operation
  const result = 'Synchronous result';
  callback(result);
}

// Synchronous callback
doSomethingSync(result => {
  console.log('Callback received:', result);
});

console.log('This line executes after the synchronous callback');

________________
Using Promises:
__________________
const fs = require('fs').promises;

// Asynchronous file read with Promises
fs.readFile('file.txt', 'utf8')
  .then(data => {
    console.log(data); // This line executes after the file read is complete
  })
  .catch(err => {
    console.error('Error reading file:', err);
  });

console.log('This will print immediately after initiating the file read');
__________________
Using Async/Await:
___________________

const fs = require('fs').promises;

async function readFile() {
  try {
    const data = await fs.readFile('file.txt', 'utf8');
    console.log(data); // This line executes after the file read is complete
  } catch (err) {
    console.error('Error reading file:', err);
  }
}

readFile();

console.log('This will print immediately after initiating the file read');



Synchronous Lines:

const fs = require('fs'); executes immediately.
fs.readFile('file.txt', 'utf8', (err, data) => { ... }); initiates the asynchronous file read.
console.log('This line executes immediately after initiating the file read'); executes immediately after the fs.readFile call.

Asynchronous Callback:

After some time, when the file read completes, the callback function is executed.
console.log('File content:', data); executes after the file read is complete and after the rest of the synchronous code has already been executed.
So the exact order of output is:

console.log('This line executes immediately after initiating the file read');: This line prints first.
console.log('File content:', data);: This line prints after the file read operation completes, and it might not print until after
the synchronous console.log statements have been executed.




CALLBACKS:


const fs = require('fs');

// Asynchronous file read with a callback
fs.readFile('file.txt', 'utf8', (err, data) => {
  if (err) {
    console.error('Error reading file:', err);
    return;
  }
  console.log('File content:', data);
});

console.log('This line executes immediately after initiating the file read');
