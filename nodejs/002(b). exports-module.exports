OKAY QUICK CONVO TO THE FUTURE: I STRUGGLED WITH THIS CONCEPTS CAUSE MY UNDERSTANDING WSA V SURFACE LEVEL WHILE MOST OF IT IS. BUT WHEN I DEEPED DIVE INTO IT 
I WAS EVEN MORECONFUSED AF AND I GOT HEADACHE. I TOOK A BREAK. I SLEPT FOR FEW MINS AND I RECORDDED MYSELF HUMMING  A SONG WITH TOTALLY DIFFFERENT TUNE. I SOUND 
SHUT ANYWAY. WHEN I GOT BACK TO THE CONCEPTS NOW. IT MADE SNESE. ITS LIKE TAKING BREAK HELPED. I WAS FEELING FRESH AND HAPPY CAUSE I TOTALLY UNDERSTOOD THE CONCEPTS.
I Am just REOCRIDING IT HERE JUST FOR MY FUTURE SELF CAUSE I KNOW I WILL FORGET IT AAHAHA CYA.

https://www.sitepoint.com/understanding-module-exports-exports-node-js/
https://stackoverflow.com/questions/5311334/what-is-the-purpose-of-node-js-module-exports-and-how-do-you-use-it?noredirect=1&lq=1
https://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js



Creating and Exporting a Module

const getName = () => {
  return 'Jim';
};

exports.getName = getName;

Now create an index.js file in the same folder and add this:

const user = require('./user');
console.log(`User: ${user.getName()}`); //User: Jim


Exporting Multiple Methods and Values

const getName = () => {
  return 'Jim';
};

const getLocation = () => {
  return 'Munich';
};

const dateOfBirth = '12.01.1982';

exports.getName = getName;
exports.getLocation = getLocation;
exports.dob = dateOfBirth;

And in index.js:

const user = require('./user');
console.log(
  `${user.getName()} lives in ${user.getLocation()} and was born on ${user.dob}.`
);

// Jim lives in Munich and was born on 12.01.1982.

Notice how the name we give the exported dateOfBirth variable can be anything we fancy (dob in this case). 
It doesn’t have to be the same as the original variable name.




Variations in Syntax

 it’s possible to export methods and values as you go, not just at the end of the file.

exports.getName = () => {
  return 'Jim';
};

exports.getLocation = () => {
  return 'Munich';
};

exports.dob = '12.01.1982';

And thanks to destructuring assignment, we can cherry-pick what we want to import:

const { getName, dob } = require('./user');
console.log(
  `${getName()} was born on ${dob}.`
);



Jim was born on 12.01.1982.


Exporting a Default Value

In the above example, we’re exporting functions and values individually. This is handy for helper functions that
could be needed all over an app, but when you have a module that exports just the one thing, 
it’s more common to use module.exports:

class User {
  constructor(name, age, email) {
    this.name = name;
    this.age = age;
    this.email = email;
  }

  getUserStats() {
    return `
      Name: ${this.name}
      Age: ${this.age}
      Email: ${this.email}
    `;
  }
}

module.exports = User;

And in index.js:

const User = require('./user');
const jim = new User('Jim', 37, 'jim@example.com');

console.log(jim.getUserStats());

Name: Jim
Age: 37
Email: jim@example.com


What’s the Difference Between module.exports and exports?

//user
module.exports = {
  getName: () => {
    return 'Jim';
  },

  getLocation: () => {
    return 'Munich';
  },

  dob: '12.01.1982',
};

____________
//dob

const { getName, dob } = require('./user');
console.log(
  `${getName()} was born on ${dob}.`
);

Jim was born on 12.01.1982.

So what is the difference between module.exports and exports? Is one just a handy alias for the other?


To illustrate what I mean, let’s change the code in index.js to log the value of module:

console.log(module);
This produces:

Module {
  id: '.',
  exports: {},
  parent: null,
  filename: '/home/jim/Desktop/index.js',
  loaded: false,
  children: [],
  paths:
   [ '/home/jim/Desktop/node_modules',
     '/home/jim/node_modules',
     '/home/node_modules',
     '/node_modules' ] }

As you can see, module has an exports property. Let’s add something to it:

// index.js
exports.foo = 'foo';
console.log(module);

This outputs:

Module {
  id: '.',
  exports: { foo: 'foo' },
  ...

Assigning properties to exports also adds them to module.exports. This is because (initially, at least) exports is a reference to module.exports.

So Which One Should I use?

As module.exports and exports both point to the same object, it doesn’t normally matter which you use. For example:

exports.foo = 'foo';
module.exports.bar = 'bar';
This code would result in the module’s exported object being { foo: 'foo', bar: 'bar' }.

However, there is a caveat. Whatever you assign module.exports to is what’s exported from your module.

So, take the following:

exports.foo = 'foo';
module.exports = () => { console.log('bar'); };

This would only result in an anonymous function being exported. The foo variable would be ignored. //SAD ISNT IT?




(counter.js):

var count = 1;

exports.increment = function() {
    count++;
};

exports.getCount = function() {
    return count;
};
... then in your application (web.js, or really any other .js file):

var counting = require('./counter.js');

console.log(counting.getCount()); // 1
counting.increment();
console.log(counting.getCount()); // 2

FELT V NICE GOING THROUGH THIS EXAMPLE. PROBABLY CAUSE IT WAS V SIMPLE?


THE BELOW EXAMPLE MAKES A LOT OF SENSE


Sometimes you'll want the object returned from a require() call to be a function you can call, rather
than just an object with properties. In that case you need to also set module.exports, like this:

(sayhello.js):

module.exports = exports = function() {
    console.log("Hello World!");
};
(app.js):

var sayHello = require('./sayhello.js');
sayHello(); // "Hello World!"





Quick Summary: both exports and module.exports point to the same object, unless you reassign one. And in the end module.exports is returned. 
So if you reassigned exports to a function then dont expect a function since it isn't going to be returned. 
However if you had assigned function like this exports.func = function... then resulting thing would have func property with function as a value. 
Because you added the property to the object that exports was pointing to 


However, using exports you can't use something like:

exports = function Something() {
    console.log('bla bla');
}
var x = require('./file1.js')(); //Error: require is not a function
