The PATH Module


The PATH module comes in handy while working with file and directory paths. It provides you with various methods with which you can:

>Join path segments together
>Tell if a path is absolute or not
>Get the last portion/segment of a path
>Get the file extension from a path, and much more!

Code:

const path = require('path')

const myPath = '/mnt/c/Desktop/NodeJSTut/app.js' 

const pathInfo = {
    fileName: path.basename(myPath),
    folderName: path.dirname(myPath),
    fileExtension: path.extname(myPath),
    absoluteOrNot: path.isAbsolute(myPath),
    detailInfo: path.parse(myPath),
}

console.log(pathInfo);

Output:

{
  fileName: 'app.js',
  folderName: '/mnt/c/Desktop/NodeJSTut',
  fileExtension: '.js',
  absoluteOrNot: true,
  detailInfo: {
    root: '/',
    dir: '/mnt/c/Desktop/NodeJSTut',
    base: 'app.js',
    ext: '.js',
    name: 'app'
  }
}







path.basename(myPath): The basename() function accepts a path and returns the last part of that path. In our case, the last part of myPath is: app.js.

path.dirname(myPath): The dirname() function selects the last part of the path provided to it and returns the path to it's parent's directory.
In our case, since the last part of myPath is app.js. The dirname() function returns the path to the parent directory 
of app.js (the folder inside which app.js file lies), i.e, /mnt/c/Desktop/NodeJSTut. It can be also thought as: the dirname() function simply
excludes the last part of the path provided to it and returns the leftover path.

path.extname(myPath): This function checks for any extension on the last part of the provided path and it returns 
the file extension (if it exists), otherwise it returns an empty string: ''. In our case, since the last part is app.js
and a file extension exists, we get '.js' as the output.

path.isAbsolute(myPath): This tells whether the provided path is absolute or not. On Unix-based systems (such as macOS and Linux),
an absolute path always starts with the forward slash (/). On Windows systems, an absolute path can start with
a drive letter (such as C:) followed by a colon (:), or with two backslashes (\\). Since the value stored in myPath 
variable starts with /, therefore isAbsolute() returns true.

However, if you just change the myPath variable to this: Desktop/NodeJSTut/app.js 
(converting it to a relative path), isAbsolute() returns false.

path.parse(myPath): This function accepts a path and returns an object which contains a detailed breakdown of the path provided to it. 
Here is what it returns when we provide the myPath variable to it:

root: The root of the path (in this case, /).
dir: The directory of the file (in this case, /mnt/c/Desktop/NodeJSTut).
base: The base file name (in this case, app.js).
ext: The file extension (in this case, .js).
name: The base name of the file, without the extension (in this case, app).


path separator and the path structure.

You must have seen that the path to a same file looks different in different Operating Systems. 

Windows user:

C:\Users\username\Desktop\Documents\example.txt

 macOS system would look like this:

/Users/username/Desktop/Documents/example.txt

2 differences are to be noted here:

Difference in path separators: In Windows, file paths use the backslash (\) as the separator between directories, while in macOS/Linux 
(which is a Unix-based system), file paths use the forward slash (/) as the separator.

Difference in root directory of the users files: On Windows, the root directory for a user's files is commonly found at C:\Users\username, 
whereas on macOS and Linux, it is located at /Users/username/. While this holds true for most Windows, macOS, and Linux systems,
there may be some variations in the exact location of the user's home directory based on the system's configuration.


path.sep: sep is a variable which contains the system specific path separator. For Windows machine: console.log(path.sep) prints \ in the
console while in case of macOS or Linux, path.sep returns a forward slash ( / ).

path.join(<paths>): The path.join() function accepts path(s) as strings. It then joins those paths using the system specific path 
separator and returns the joined path. For example, consider this code:

console.log(path.join('grandParentFolder', 'parentFolder', 'child.txt'))

The above code prints different results for different Operating Systems.

In Windows, it will give this output: grandParentFolder\parentFolder\child.txt 

while in macOS/Linux, 

it will give this output: grandParentFolder/parentFolder/child.txt. 


path.resolve(<paths>): This function works in a similar way as compared to path.join(). The path.resolve() function just joins the differen
t paths provided to it using the system specific path separator and then appends the final output to the absolute path of the present working directory.



More gyaaan:




var chai = require('chai')
  , authenticate = require('../../lib/middleware/authenticate')
  , Passport = require('../..').Passport;

is same as 

var chai = require('chai');
var authenticate = require('../../lib/middleware/authenticate');

The path ../../lib/middleware/authenticate is a relative path. This means it's relative to the directory of the current
file where the require statement is located.

Node.js resolves this path starting from the current file's directory, moving up and down the directory structure as specified by the path.

../: This moves up one directory level.

../../: Since there are two ../ segments, this means you move up two directory levels from the current file's location.

lib/middleware/authenticate: After moving up two levels, Node.js looks for a directory named lib, then a subdirectory named middleware, 
and finally a file named authenticate.


var Passport = require('../..').Passport;

//This loads a module located two directories up (../..) and then accesses the Passport property of the module's export.
