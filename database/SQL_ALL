SELECT * FROM table_name;  //selects all the data from the table...

SELECT column1, column2 FROM table_name;   //selects column_name1 and column_name2 columns data from the table...

SELECT DISTINCT column1, column2, ... FROM table_name;    //The SELECT DISTINCT statement is used to return only distinct (different) values.
It returns the distinct values from the column1, column2 will not be distinct

SELECT COUNT(DISTINCT Country) FROM Customers;     //Gets the count of total number of different countries

SELECT Count(*) AS DistinctCountries FROM (SELECT DISTINCT Country FROM Customers);   //gets the count of total number of different countries

SELECT column1, column2, ... FROM table_name WHERE condition;     //The WHERE clause is used to filter records. It is used to extract only those records that fulfill a specified condition.

SELECT * FROM Customers WHERE Country='Mexico';   // Selects only those countries which has Mexico value.

SELECT * FROM Products WHERE Price <> 18;  //Selects those values from price which doesn't contain 18 as its value. its is not qual to symble and its also equivalent to !=

SELECT * FROM Products WHERE Price BETWEEN 50 AND 60;     //Between a certain range

SELECT * FROM Customers WHERE City LIKE 's%';  //Searches for a pattern which starts with s with following 0 or more characters

SELECT * FROM Customers WHERE City IN ('Paris','London');    //To specify multiple possible values for a column

SELECT * FROM Customers WHERE City='Paris' OR City ='London';      //To specify multiple possible values for a column

SELECT column1, column2, ... FROM table_name WHERE (condition1 AND condition2) OR  condition3 ...;     //The where clause can be combined with AND, OR, NOT operators.

SELECT * FROM Customers WHERE Country='Germany' AND City='Berlin';    //selects all fields from "Customers" where country is "Germany" AND city is "Berlin"

SELECT * FROM Customers WHERE City='Berlin' OR City='München';      // selects all fields from "Customers" where city is "Berlin" OR "München":

SELECT * FROM Customers WHERE NOT Country='Germany';   //selects all fields from "Customers" where country is NOT "Germany"

SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');  //selects all fields from "Customers" where country is "Germany" AND city must be "Berlin" OR "München"
(use parenthesis to form complex expressions):
  
SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';    //selects all fields from "Customers" where country is NOT "Germany" and NOT "USA"

SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;     //The order by keyword is used to sort the result-set in ascending or descending order.

SELECT * FROM Customers ORDER BY Country, CustomerName;      //selects all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. 
This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:

INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);   //The Insert into statement is used to insert new records in a table
and specify both the column name and values.
  
INSERT INTO table_name VALUES (value1, value2, value3, ...);     //If you are adding values for all the columns of the table, you do not need to specify
the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table.
  
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'); 
  //SQL statement inserts a new record in the "Customers" table

SELECT column_names FROM table_name WHERE column_name IS NULL;  //A field with a NULL value is a field with no value.
  
SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NOT NULL;  //selects the address that contains values. The is not null operator 
is used to test for non-empty values (NOT NULL values).

UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;   //The update statement is used to modify the existing records in a table.

UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;     //The following SQL statement updates the first customer (CustomerID = 1) with a new 
contact person and a new city.

UPDATE Customers SET ContactName='Juan' WHERE Country='Mexico';    //statement will update the ContactName to "Juan" for all records where country is "Mexico"

UPDATE Customers SET ContactName='Juan';  //Be careful when updating records. If you omit the where clause, ALL records will be updated!

DELETE FROM table_name WHERE condition;     //The Delete statement is used to delete existing records in a table.

DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';   //The following SQL statement deletes the customer "Alfreds Futterkiste" from the "Customers" table:

DELETE FROM Customers;      //It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact

SELECT * FROM Customers LIMIT 3;  //fetches first three row.

SELECT MIN(column_name) FROM table_name WHERE condition;   //The min() function returns the smallest value of the selected column.

SELECT MIN(Price) AS SmallestPrice FROM Products;  // Selects the minimum value

SELECT COUNT(column_name) FROM table_name WHERE condition;  //Selects the count of the column values

SELECT AVG(column_name) FROM table_name WHERE condition;    //The avg() function returns the average value of a numeric column.

SELECT SUM(column_name) FROM table_name WHERE condition;     //The sum() function returns the total sum of a numeric column.

SELECT column1, column2, ... FROM table_name WHERE column LIKE pattern;      //The like operator is used in a where clause to search for a specified pattern 
in a column.The percent sign (%) represents zero, one, or multiple characters and The underscore sign (_) represents one, single character
WHERE CustomerName LIKE 'a%' Finds any values that start with "a"
WHERE CustomerName LIKE '%a' Finds any values that end with "a"
WHERE CustomerName LIKE '%or%' Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%' Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%' Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%' Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o' Finds any values that start with "a" and ends with "o"
WHERE CustomerName NOT LIKE 'a%' Finds all customers with a CustomerName that does NOT start with "a"

:Wildcard Characters in MS Access
*Represents zero or more characters bl* finds bl, black, blue, and blob
?Represents a single character h?t finds hot, hat, and hit
[]Represents any single character within the brackets h[oa]t finds hot and hat, but not hit
!Represents any character not in the brackets h[!oa]t finds hit, but not hot and hat
-Represents any single character within the specified range c[a-b]t finds cat and cbt
#Represents any single numeric character2#5 finds 205, 215, 225, 235, 245, 255, 265, 275, 285, and 295Wildcard 

:Characters in SQL Server
%Represents zero or more characters bl% finds bl, black, blue, and blob
_Represents a single character h_t finds hot, hat, and hit
[]Represents any single character within the bracket sh[oa]t finds hot and hat, but not hit
^Represents any character not in the brackets h[^oa]t finds hit, but not hot and hat
-Represents any single character within the specified range c[a-b]t finds cat and cbt
  

SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);  //The in operator allows you to specify multiple values in
 

SELECT column_name(s) FROM table_name WHERE column_name IN (SELECT STATEMENT);

SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK');  //The following SQL statement selects all customers that are located in "Germany", "France" or "UK":

SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');    //The following SQL statement selects all customers that are NOT 
located in "Germany", "France" or "UK":Monday, March 7th Pooja Ramesh  4:11 PM

SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers);  //The following SQL statement selects all customers that
are from the same countries as the suppliers:

SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;  //The between operator is inclusive: begin and end values are included. selects values
within a given range. The values can be numbers, text, or dates

SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;  //The following SQL statement selects all products with a price between 10 and 20:

SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;   //To display the products outside the range of the previous example, use not between;

SELECT * FROM Products WHERE Price BETWEEN 10 AND 20 AND CategoryID NOT IN (1,2,3);  //The following SQL statement selects all products with a price
between 10 and 20. In addition; do not show products with a CategoryID of 1,2, or 3:

SELECT * FROM Products WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' ORDER BY ProductName;  //The following SQL statement 
selects all products with a ProductName between Carnarvon Tigers and Mozzarella di Giovanni:

  //The BETWEEN operator works based on the natural (lexicographical) order of strings, which SQL handles by comparing the characters in the 
  strings according to their Unicode values. You don’t need to explicitly specify alphabetical ordering when using BETWEEN because SQL
  inherently understands how to compare strings in this way. The results are then sorted in the order you specify with the ORDER BY clause.
  
SELECT * FROM Orders WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31'; //The following SQL statement selects all orders with 
  an OrderDate between '01-July-1996' and '31-July-1996';

SELECT column_name AS alias_name FROM table_name; //SQL aliases are used to give a table, column in a table, a temporary name. 
  Aliases are often used to make column names more readable. An alias only exists for the duration of that query. 
  An alias is created with the AS keyword.  //SQL aliases are used to give a table,

SELECT column_name(s) FROM table_name AS alias_name;
  
SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers; //The following SQL statement creates two aliases, one for the 
CustomerID column and one for the CustomerName column:

SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers;   //The following SQL statement creates two aliases, one for the CustomerName column 
and one for the ContactName column. Note: It requires double quotation marks or square brackets if the alias name contains spaces:

SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address  //The following SQL statement creates an alias named "Address"
that combine four columns (Address, PostalCode, City and Country):

SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address FROM Customers;  //Note: To get the SQL statement 
above to work in MySQL use the following:

SELECT o.OrderID, o.OrderDate, c.CustomerName FROM Customers AS c, Orders AS o WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;  
//The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the "Customers" and "Orders" tables,
and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):

SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName FROM Customers, Orders WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;  
//The following SQL statement is the same as above, but without aliases:

SQL JOINS:

Here are the different types of the JOINs in SQL:

(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table

INNER JOIN:

SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;


OrderID	CustomerID	OrderDate
10308	2	1996-09-18
10309	37	1996-09-19
10310	77	1996-09-20
Then, look at a selection from the "Customers" table:

CustomerID	CustomerName	ContactName	Country
1	Alfreds Futterkiste	Maria Anders	Germany
2	Ana Trujillo Emparedados y helados	Ana Trujillo	Mexico
3	Antonio Moreno Taquería	Antonio Moreno	Mexico

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;

will produce this output:

OrderID	CustomerName	OrderDate
10308	Ana Trujillo Emparedados y helados	1996-09-18


LEFT JOIN:

SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;


Customers Table:
CustomerID	CustomerName
1	Alice
2	Bob
3	Charlie
4	Diana

Orders Table:
OrderID	CustomerID	OrderDate
101	1	2023-09-01
102	2	2023-09-03
103	2	2023-09-04

Left Join Query:

You want to find all customers and any orders they have placed. Even if a customer has not placed any orders, 
you still want their name to show up in the result.

SELECT Customers.CustomerName, Orders.OrderID, Orders.OrderDate
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

Result of the LEFT JOIN:

CustomerName	OrderID	OrderDate
Alice	101	2023-09-01
Bob	102	2023-09-03
Bob	103	2023-09-04
Charlie	NULL	NULL
Diana	NULL	NULL


RIGHT JOIN:

SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

SELECT Customers.CustomerName, Orders.OrderID, Orders.OrderDate
FROM Customers
RIGHT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;


Result of the RIGHT JOIN:

CustomerName	OrderID	OrderDate
Alice	101	2023-09-01
Bob	102	2023-09-03
NULL	103	2023-09-05


OUTER JOIN:

SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;



SELECT c.CustomerName, o.OrderID, o.OrderDate
FROM Customers AS c
FULL OUTER JOIN Orders AS o ON c.CustomerID = o.CustomerID;


CustomerName	OrderID	OrderDate
Alice	101	2023-09-01
Bob	102	2023-09-03
Charlie	NULL	NULL
NULL	103	2023-09-05


Note:
Some database systems, like MySQL, do not support FULL OUTER JOIN directly. In those cases, you can achieve the same result
by combining a LEFT JOIN and a RIGHT JOIN with a UNION.

Here's how you can do it in MySQL:

SELECT c.CustomerName, o.OrderID, o.OrderDate
FROM Customers AS c
LEFT JOIN Orders AS o ON c.CustomerID = o.CustomerID
UNION
SELECT c.CustomerName, o.OrderID, o.OrderDate
FROM Customers AS c
RIGHT JOIN Orders AS o ON c.CustomerID = o.CustomerID;
This will give you the same result as a FULL OUTER JOIN.


SQL Self Join

A self join is a regular join, but the table is joined with itself.

Self Join Syntax
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;

CustomerID	CustomerName	City
1	Alice	New York
2	Bob	Los Angeles
3	Charlie	New York
4	Diana	Chicago
5	Edward	Los Angeles
6	Frank	San Francisco


SELECT A.CustomerName AS CustomerName1, 
       B.CustomerName AS CustomerName2, 
       A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID //This condition ensures that we only consider pairs of customers that are different. It prevents a customer from being paired with themselves.
AND A.City = B.City
ORDER BY A.City;

Final Result:
CustomerName1	CustomerName2	City
Alice	Charlie	New York
Bob	Edward	Los Angeles
Charlie Alice New York
Edward Bob Los Anglese

if we use A.customerID < B.CustomerID then we can avoid the dupliactes



UNION

The UNION operator is used to combine the result-set of two or more SELECT statements.

Every SELECT statement within UNION must have the same number of columns
The columns must also have similar data types
The columns in every SELECT statement must also be in the same order

UNION Syntax:

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

To allow duplicate values, use UNION ALL:

SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;


Customers Table:
CustomerID	CustomerName	City	Country
1	Alfreds Futterkiste	Berlin	Germany
2	Ana Trujillo Emparedados	Mexico City	Mexico
3	Antonio Moreno Taquería	Frankfurt	Germany
4	Maria Anders	Hamburg	Germany
5	Edward	Madrid	Spain

Suppliers Table:
SupplierID	SupplierName	City	Country
1	Acme Corp	Berlin	Germany
2	Best Supplies	Munich	Germany
3	Super Goods	Los Angeles	USA
4	Global Products	Frankfurt	Germany
5	International Trade	Toronto	Canada



SELECT City, Country 
FROM Customers 
WHERE Country = 'Germany'
UNION ALL
SELECT City, Country 
FROM Suppliers 
WHERE Country = 'Germany'
ORDER BY City;

City	Country
Berlin	Germany
Berlin	Germany
Frankfurt	Germany
Frankfurt	Germany
Hamburg	Germany
Munich	Germany


if UNION

City	Country
Berlin	Germany
Frankfurt	Germany
Hamburg	Germany
Munich	Germany

The SQL GROUP BY Statement

The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".
The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.

SYntax:
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);

Sales Table:
SaleID	ProductName	Quantity	Price	SaleDate
1	Apple	10	1.00	2024-10-01
2	Banana	5	0.50	2024-10-01
3	Apple	15	1.00	2024-10-02
4	Orange	8	0.75	2024-10-02
5	Banana	7	0.50	2024-10-03
6	Apple	20	1.00	2024-10-03


SELECT ProductName, SUM(Quantity) AS TotalQuantity
FROM Sales
GROUP BY ProductName
ORDER BY TotalQuantity DESC;

result:

ProductName	TotalQuantity
Apple	45
Banana	12
Orange	8


SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;

Result:

ShipperName	NumberOfOrders
Federal Shipping 	68 
Speedy Express 	54 

more example:

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;
United Package 	74 


The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

HAVING Syntax

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);


SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;

Number of Records: 5
Expr1000	Country
9 	Brazil 
11 	France 
11 	Germany 
7 	UK 
13 	USA 




The SQL EXISTS Operator


The EXISTS operator is used to test for the existence of any record in a subquery.
The EXISTS operator returns TRUE if the subquery returns one or more records.

EXISTS Syntax:

SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);
HAVING COUNT(Orders.OrderID) > 25;

example:

SELECT SupplierName
FROM Suppliers
WHERE EXISTS (
    SELECT ProductName 
    FROM Products 
    WHERE Products.SupplierID = Suppliers.SupplierID 
    AND Price = 22
);


FROM Suppliers: The query starts by selecting from the Suppliers table.

EXISTS Clause: For each supplier in the Suppliers table, the EXISTS subquery is executed. This subquery checks if 
there are any products associated with the current supplier that have a price of 22.

Subquery Execution:

For Supplier A (SupplierID = 1):
The subquery checks the Products table. It finds one product (Product 2) that matches (Price = 22).
EXISTS returns TRUE, so Supplier A is included in the final result.

________________________________________

Complete Order of Execution in SQL Queries
FROM Clause:
JOINs:
WHERE Clause:
GROUP BY Clause:
HAVING Clause:
SELECT Clause: 
DISTINCT:
ORDER BY Clause:
LIMIT / OFFSET Clause:


Subqueries: If there are subqueries (like the EXISTS clause in your earlier examples), those are executed as
needed during the evaluation of the outer query. The result of the subquery affects how the
outer query processes its data.

Set Operations: If you are using operations like UNION, INTERSECT, or EXCEPT, these are processed after the 
individual queries are executed and their results are combined.

_________________________________________________


The SQL ANY and ALL Operators

The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.

The ANY operator:
returns a boolean value as a result
returns TRUE if ANY of the subquery values meet the condition

ANY means that the condition will be true if the operation is true for any of the values in the range.

ANY Syntax:

SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
  (SELECT column_name
  FROM table_name
  WHERE condition);

Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).


Products Table:

ProductID	ProductName	Price
1	Product A	15
2	Product B	25
3	Product C	35
4	Product D	45

Sales Table:

SaleID	ProductID	SalePrice
101	1	10
102	2	20
103	3	30
104	4	50

Using ANY:

Let's find products that are more expensive than any of the sale prices from the Sales table.

SQL Query with ANY

SELECT ProductName
FROM Products
WHERE Price > ANY (SELECT SalePrice FROM Sales);

ProductName
Product A
Product B
Product C
Product D
Using ALL

Now, let's find products whose prices are greater than all the sale prices from the Sales table.

SQL Query with ALL

SELECT ProductName
FROM Products
WHERE Price > ALL (SELECT SalePrice FROM Sales);

Final Result for ALL
ProductName
Empty




SELECT INTO


Employees Table:

EmployeeID	EmployeeName	Department	Salary
1	Alice Johnson	HR	60000
2	Bob Smith	IT	75000
3	Charlie Brown	Finance	70000
4	David Wilson	IT	72000
5	Eva Green	HR	65000

Creating a New Table

1. Copy All Columns Into a New Table
To create a backup of the entire Employees table:

SELECT *
INTO EmployeesBackup
FROM Employees;

Result: This creates a new table named EmployeesBackup with the same structure and data as the Employees table.



2. Copy Specific Columns Into a New Table
If you only want to copy the EmployeeName and Salary columns into a new table:

SELECT EmployeeName, Salary
INTO EmployeeSalaries
FROM Employees;

Result: This creates a new table named EmployeeSalaries containing:

EmployeeName	Salary
Alice Johnson	60000
Bob Smith	75000
Charlie Brown	70000
David Wilson	72000
Eva Green	65000


3. Copy Rows Based on a Condition

If you want to copy only the employees from the IT department into a new table:

SELECT *
INTO ITEmployees
FROM Employees
WHERE Department = 'IT';
Result: This creates a new table named ITEmployees with the following data:

EmployeeID	EmployeeName	Department	Salary
2	Bob Smith	IT	75000
4	David Wilson	IT	72000
4. Using IN Clause to Create a Table in Another Database


OHHHH!

If you have a separate database called BackupDB, you can copy the entire Employees table into this new database:

SELECT *
INTO EmployeesBackup IN 'BackupDB'
FROM Employees;

Result: This creates a new table named EmployeesBackup in the BackupDB database with all the data from the Employees table.

Tip: Create an Empty Table Using the Schema of Another

If you want to create an empty table based on the Employees table structure, you can do so like this:


SELECT *
INTO EmptyEmployees
FROM Employees
WHERE 1 = 0;
Result: This creates a new table named EmptyEmployees with the same schema as the Employees table but with no data. 1 is never = 0 so no data will be added.



INSERT INTO

The INSERT INTO SELECT statement allows you to take existing data from one table (the source table) and insert it into another table (the target table).

The INSERT INTO SELECT statement adds new records to the target table but does not affect the existing records.
It merely appends the new data to the end of the table.

Syntax

INSERT INTO target_table (column1, column2, ...)
SELECT column1, column2, ...
FROM source_table
WHERE condition;


Example

Let’s consider two tables: Employees and ArchivedEmployees. We want to move employees who have left the 
company from the Employees table to the ArchivedEmployees table.

EmployeeID	EmployeeName	Department	Status
1	Alice Johnson	HR	Active
2	Bob Smith	IT	Inactive
3	Charlie Brown	Finance	Active
Structure of ArchivedEmployees Table
EmployeeID	EmployeeName	Department	Status
4	David Wilson	IT	Inactive

INSERT INTO ArchivedEmployees (EmployeeID, EmployeeName, Department, Status)
SELECT EmployeeID, EmployeeName, Department, Status
FROM Employees
WHERE Status = 'Inactive';

Result
After executing the above SQL statement, the ArchivedEmployees table will be updated as follows:

EmployeeID	EmployeeName	Department	Status
4	David Wilson	IT	Inactive
2	Bob Smith	IT	Inactive


Copy "Suppliers" into "Customers" (the columns that are not filled with data, will contain NULL):

INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers;



The SQL CASE Expression


The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So,
once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.

If there is no ELSE part and no conditions are true, it returns NULL.

CASE Syntax
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;


SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

SELECT CustomerName, City, Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END);


SQL Null Handling Functions: IFNULL(), ISNULL(), COALESCE(), and NVL()

These functions are used in SQL to handle NULL values and return alternative values when expressions are NULL. Here's a brief overview with an example using a "Products" table.

Example Products Table
P_Id	ProductName	UnitPrice	UnitsInStock	UnitsOnOrder
1	Jarlsberg	10.45	16	15
2	Mascarpone	32.56	23	NULL
3	Gorgonzola	15.67	9	20


When calculating the total value of stock (using the formula UnitPrice * (UnitsInStock + UnitsOnOrder)), a NULL value in the "UnitsOnOrder" column will result in a NULL total.

Solutions
MySQL: Using IFNULL():

In the expression IFNULL(UnitsOnOrder, 0), the 0 serves as the alternative value that will be returned if UnitsOnOrder is NULL

SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0)) AS TotalValue
FROM Products;

Using COALESCE():

SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) AS TotalValue
FROM Products;

SQL Server: Using ISNULL():


SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0)) AS TotalValue
FROM Products;

Using COALESCE():
SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) AS TotalValue
FROM Products;
