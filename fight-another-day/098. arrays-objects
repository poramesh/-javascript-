_________________
Objects in Arrays
__________________

An array can contain elements of any type, including objects. When you store objects in an array, each element of the array is an object, 
which allows you to create collections of related data.

Example:

// Define an array with objects
const users = [
  { name: 'Alice', age: 30, email: 'alice@example.com' },
  { name: 'Bob', age: 25, email: 'bob@example.com' },
  { name: 'Charlie', age: 35, email: 'charlie@example.com' }
];

console.log(users[0]); // Output: { name: 'Alice', age: 30, email: 'alice@example.com' }
console.log(users[1].name); // Output: Bob

users.push({ name: 'Dave', age: 40, email: 'dave@example.com' });

console.log(users);

Explanation:

_____________________
Objects Inside Objects
_____________________
Objects can contain other objects as properties. This allows you to create complex data structures with nested levels of information.

Example:

const userProfile = {
  name: 'Alice',
  age: 30,
  contact: {
    email: 'alice@example.com',
    phone: '555-1234'
  },
  address: {
    city: 'Wonderland',
    zip: '12345'
  }
};

console.log(userProfile.contact.email); // Output: alice@example.com
console.log(userProfile.address.city); // Output: Wonderland

________________________
Combining Both Concepts
________________________
You can combine both concepts to create complex data structures. For example, an array of objects where each object contains nested objects:

Example:

const users = [
  {
    name: 'Alice',
    age: 30,
    contact: {
      email: 'alice@example.com',
      phone: '555-1234'
    },
    address: {
      city: 'Wonderland',
      zip: '12345'
    }
  },
  {
    name: 'Bob',
    age: 25,
    contact: {
      email: 'bob@example.com',
      phone: '555-5678'
    },
    address: {
      city: 'Builderland',
      zip: '67890'
    }
  }
];

// Accessing data
console.log(users[0].contact.email); // Output: alice@example.com
console.log(users[1].address.city); // Output: Builderland
