
JWT stands for JSON Web Token. It is an open standard (RFC 7519) that defines a compact, self-contained way of securely transmitting
information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.


Key Features of JWT:

Compact:

JWTs are compact in size, making them easy to transfer via URLs, POST parameters, or inside HTTP headers.
This makes JWT a good option for scenarios like single sign-on (SSO).

Self-contained:

JWT contains all the necessary information about the user or payload, reducing the need for querying a database on every request.

Secure:

JWTs can be signed using a secret key (HMAC) or a public/private key pair (RSA or ECDSA), ensuring the integrity and authenticity of the token.
Optionally, the payload can be encrypted to enhance security.

Stateless:

JWT is stateless, meaning the server doesn’t need to store the token. The client stores it, and it’s sent back with every request for validation.

Structure of a JWT

A JWT is divided into three parts, separated by dots (.): Header.Payload.Signature


Header:

Contains metadata about the token, such as the type of token (JWT) and the signing algorithm (e.g., HMAC SHA256 or RSA).
Example:
{
    "alg": "HS256",
    "typ": "JWT"
}

Payload:

Contains the claims, which are the statements about an entity (typically, the user) and additional data.

Claims can include:
Registered claims (e.g., iss, exp, sub).
Public claims (e.g., user information like name or email).
Private claims (custom information defined by the application).

Example:
{
    "sub": "1234567890",
    "name": "John Doe",
    "admin": true,
    "exp": 1711827595
}

Signature:

Ensures that the token hasn’t been tampered with and verifies the sender’s authenticity.

To create the signature:

HMACSHA256(
  base64UrlEncode(header) + "." + base64UrlEncode(payload),
  secret_key
)




Use Cases of JWT

Authentication:

After a user logs in, the server generates a JWT and sends it to the client.
The client stores this token (e.g., in local storage or cookies) and includes it in the Authorization header of every subsequent request.

Authorization:

JWTs help determine what resources the user can access. The token’s payload may include user roles or permissions.

Information Exchange:

Securely transmit information between two parties, ensuring integrity and authenticity.

Advantages of JWT
Scalable: Works well in distributed environments without the need for session storage.
Cross-Language: JSON format allows JWT to be easily used across different programming languages.
Efficient: Reduces server-side processing by moving authentication checks to the token.

Disadvantages of JWT
Payload Size: Can become large if too much data is stored in the token.
Revocation: Once issued, tokens cannot easily be revoked unless additional mechanisms (e.g., a blacklist) are implemented.
Expiration Management: Short-lived tokens need to be refreshed frequently for better security.

Example of a JWT

Decoded parts of a sample JWT:
{
    "alg": "HS256",
    "typ": "JWT"
}


Payload:
{
    "sub": "1234567890",
    "name": "John Doe",
    "iat": 1516239022
}


Signature:
HMACSHA256(
    base64UrlEncode(header) + "." + base64UrlEncode(payload),
    secret_key
)


The resulting JWT might look like:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c






What is a Refresh Token?

A refresh token is a credential used to obtain a new access token after the current access token expires. 
It is a long-lived token provided during authentication and is securely stored by the client. Unlike access tokens,
refresh tokens are not sent with every request to the server. 
Instead, they are used only when an access token needs to be renewed.

Purpose of a Refresh Token

Extended Authentication:

Refresh tokens allow users to stay logged in without needing to log in again when their access token expires.

Security:

Access tokens are short-lived, reducing the risk if they are leaked or stolen.
Refresh tokens are long-lived but are stored securely (e.g., in a secure cookie or secure storage), reducing exposure to attacks.\\



How Does a Refresh Token Work?

The refresh token works in conjunction with access tokens. Here's the typical flow:

Initial Login:
The client sends the user's credentials (username and password or other authentication method) to the server.
The server authenticates the user and issues both:
An access token (short-lived, e.g., 15 minutes).
A refresh token (long-lived, e.g., days or weeks).

Using the Access Token:
The client includes the access token in the headers (e.g., Authorization: Bearer <access_token>) to access protected resources.

Access Token Expiry:
When the access token expires, the server rejects the request with an error (e.g., 401 Unauthorized).

Using the Refresh Token:
The client sends the refresh token to the server (typically via a dedicated endpoint, like /token/refresh).
The server verifies the refresh token, issues a new access token (and optionally a new refresh token), and sends them back to the client.

Client Updates Tokens:
The client replaces the old access token with the new one and resumes making authorized requests.


Advantages of Refresh Tokens

Increased Security:
Short-lived access tokens reduce the window of opportunity for attackers if the token is intercepted.
Refresh tokens are not exposed in every request.

Improved User Experience:
Users don't need to log in repeatedly because the refresh token allows seamless token renewal.

Revocation Support:
If a refresh token is compromised, it can be revoked server-side to invalidate future token exchanges.


Disadvantages of Refresh Tokens

Complex Implementation:
Adds another layer of token management, including secure storage and token rotation logic.

Potential for Abuse:
If a refresh token is leaked, an attacker can obtain new access tokens until the refresh token is revoked or expires.

Storage Challenges:
Storing refresh tokens securely on the client-side requires proper implementation (e.g., secure cookies, encrypted storage).


Secure Practices for Refresh Tokens

Use Secure Transport:
Always use HTTPS to prevent tokens from being intercepted.

Store Tokens Securely:
Store refresh tokens in secure, tamper-proof storage (e.g., HttpOnly cookies or secure mobile storage).

Token Rotation:
Rotate refresh tokens on every use. The server issues a new refresh token when the client uses the current one, invalidating the old one.

Implement Expiry:
Set an expiration time for refresh tokens to limit their usability window.

Revoke Tokens:
Maintain a server-side token blacklist to revoke compromised tokens.

Restrict Scope:
Use refresh tokens with limited scope and permissions to minimize damage if stolen.



Example Flow

Client Login:
Response:
{
  "access_token": "eyJhbGciOiJIUz...",
  "refresh_token": "dGhpcyByZWZyZXNo..."
}

Access Token Usage:
Request:
GET /protected/resource
Authorization: Bearer eyJhbGciOiJIUz...

Access Token Expired:
Response:
{
  "error": "invalid_token",
  "message": "Access token expired."
}


Refresh Token Exchange:
Request:
POST /token/refresh
Content-Type: application/json
{
  "refresh_token": "dGhpcyByZWZyZXNo..."
}
Response:
{
  "access_token": "new_access_token...",
  "refresh_token": "new_refresh_token..."
}

Continue Using New Access Token:
The client stores the new tokens and resumes making API calls.

When Not to Use Refresh Tokens
If your app architecture allows storing short-lived tokens and re-authentication is straightforward
(e.g., Single Page Applications with OAuth 2.0 implicit flow), refresh tokens may not be necessary.

Efficiency:
Eliminates the need for repeated login prompts by issuing new access tokens programmatically.


__________________________________________________________





THE TOKEN IS BASICALLY STORED ON THE CLIENT SIDE. THE SERVER DOESNT HAVE TO SAVE IT. WHEN CLIENT MAKES A REQEUST, 
THER SERVER LOGIC ONLY CHECKS IF THE TOKESN I VALID.

THE .env file contains the acess key and refresh key token, which helps in generating thhe tokens wiht a signature.
each time it generates a unique tokens.


Real-World Storage Practices
Access Token:

Sent to the client but not stored on the server.
Statelessly verified with the ACCESS_TOKEN_SECRET.
Refresh Token:

Stored securely on the server (e.g., database, Redis).
Used to generate new access tokens and manage session invalidation.

