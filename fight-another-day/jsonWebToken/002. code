LINIK:

https://github.com/WebDevSimplified/JWT-Authentication/blob/master/authServer.js

Basic JWT Authentication

Setup the Project

Initialize NPM Project:

npm init -y

This sets up a default package.json.

Install Required Libraries:

express: For creating the server.
jsonwebtoken: To handle JSON Web Tokens.
dotenv: To manage environment variables.
nodemon: For live-reloading during development (as a dev dependency).

npm i express jsonwebtoken dotenv
npm i --save-dev nodemon

Setup package.json:

Add a dev-start script to use nodemon:

"scripts": {
  "dev-start": "nodemon server.js"
}


Create the Server

Create server.js:


const express = require('express');
const app = express();
const jwt = require('jsonwebtoken');
require('dotenv').config();

app.use(express.json()); // To parse JSON body

Set the Port:

app.listen(3000, () => {
    console.log("Server is running on port 3000");
});

Add a Route to Return Posts:


const posts = [
    { username: 'Kyle', title: 'Post 1' },
    { username: 'Jim', title: 'Post 2' },
];

app.get('/posts', (req, res) => {
    res.json(posts);
});


Create JWT for Authentication

Add Login Route:

app.post('/login', (req, res) => {
    const username = req.body.username;
    const user = { name: username };

    const accessToken = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET);
    res.json({ accessToken });
});


Set Up .env File:

Create a .env file for storing secrets: ACCESS_TOKEN_SECRET=your_secret_key

Generate a Random Secret Key: Use Node.js's crypto module:

node
> require('crypto').randomBytes(64).toString('hex')


Copy the generated key and paste it as ACCESS_TOKEN_SECRET in .env.

Authenticate API Requests

Middleware for Token Verification:

function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) return res.sendStatus(401);

    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
}

Protect the /posts Route:


app.get('/posts', authenticateToken, (req, res) => {
    res.json(posts.filter(post => post.username === req.user.name));
});


Part 2: Implementing Refresh Tokens

Why Refresh Tokens?:
Short-lived Access Tokens: Improves security by limiting exposure.
Persistent Login: Allows issuing new access tokens without requiring re-login.
Revocation: Enables revoking tokens for logged-out users.

Setup Refresh Tokens
Update Login Route:

let refreshTokens = [];

app.post('/login', (req, res) => {
    const username = req.body.username;
    const user = { name: username };

    const accessToken = generateAccessToken(user);
    const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET);
    refreshTokens.push(refreshToken);
    res.json({ accessToken, refreshToken });
});

function generateAccessToken(user) {
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15m' });
}


Add Route for Refreshing Tokens:


app.post('/token', (req, res) => {
    const refreshToken = req.body.token;
    if (!refreshToken || !refreshTokens.includes(refreshToken)) return res.sendStatus(403);

    jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        const accessToken = generateAccessToken({ name: user.name });
        res.json({ accessToken });
    });
});


Add Logout Route to Revoke Tokens:


app.delete('/logout', (req, res) => {
    const refreshToken = req.body.token;
    refreshTokens = refreshTokens.filter(token => token !== refreshToken);
    res.sendStatus(204);
});


Update .env File: Add another secret for refresh tokens:


REFRESH_TOKEN_SECRET=your_refresh_secret_key


Testing the Application

Using REST Client:

Install the REST Client extension in Visual Studio Code.

Create a .rest file:

POST http://localhost:3000/login
Content-Type: application/json

{
    "username": "Kyle"
}

# Access Protected Posts
GET http://localhost:3000/posts
Authorization: Bearer <access_token>

# Refresh Access Token
POST http://localhost:3000/token
Content-Type: application/json

{
    "token": "<refresh_token>"
}

# Logout
DELETE http://localhost:3000/logout
Content-Type: application/json

{
    "token": "<refresh_token>"
}

Test Scenarios:

Login: Obtain accessToken and refreshToken.
Access Posts: Use accessToken to fetch posts.
Refresh Token: Get a new accessToken using refreshToken.
Logout: Revoke the refreshToken to prevent reuse.

Conclusion

Use jsonwebtoken for token creation and validation.
Protect sensitive data with environment variables (dotenv).
Short-lived access tokens improve security.
Refresh tokens handle persistent logins and allow revocation.

Next Steps:

Implement database storage for refresh tokens instead of an in-memory array.
Add further security, like HTTPS and rate limiting, for production-ready applications.


The Callback (err, user)

jwt.verify() takes the JWT (token) and the secret (process.env.ACCESS_TOKEN_SECRET) and decodes it. After decoding, it
checks if the token is valid by verifying its signature.

The callback (err, user) is invoked with the following:

err: If an error occurs during verification, this will contain information about the error (e.g., if the token is invalid, expired, or tampered with).
For example, if the token is expired, youâ€™ll get an error like JsonWebTokenError: jwt expired.

user: If the token is valid, this will contain the decoded payload, which could be user-specific information (e.g., user ID). 
This is the part of the token that you encode when the token is created.


