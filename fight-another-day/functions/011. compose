In functional programming, function composition is a powerful technique that allows developers to combine multiple functions into a single function.


The compose function is a higher-order function that combines multiple functions into one, allowing you to compose 
functions in a way that the output of one function becomes the input to the next.

The compose function is often used in functional programming and allows for building complex logic by combining
simpler functions. Here's how it works in depth


Given multiple functions f, g, h, etc., a composed function can be written as:


const composedFunction = compose(f, g, h);

This means that when you call composedFunction(x), it will execute the following in right-to-left order:

First: Apply h(x).
Then: Apply g(h(x)).
Finally: Apply f(g(h(x))).

In simpler terms, compose is a way of chaining functions where the result of each function becomes the input for the next.

Basic Syntax and Example

function compose(...functions) {
  return function(arg) {
    return functions.reduceRight((acc, fn) => fn(acc), arg);
  };
}

functions is an array of functions passed to compose.
reduceRight is used to apply these functions from right-to-left (opposite of reduce, which is left-to-right).
acc is the accumulator that holds the result after applying each function.
arg is the initial argument passed to the composed function.

function add(x) {
  return x + 2;
}

function multiply(x) {
  return x * 3;
}

// Composing the functions
const addThenMultiply = compose(multiply, add);

// Executing the composed function
console.log(addThenMultiply(4)); // (4 + 2) * 3 = 18

Steps for the above example:
add(4) is called first, returning 6 (4 + 2).
multiply(6) is called next, returning 18 (6 * 3).


Why Right-to-Left Order?

The right-to-left execution is typically how function composition works in functional programming because:

The first function passed to compose becomes the last operation performed.
Itâ€™s a natural way to think about data transformation: you apply the transformations in the order they are written, 
but you start with the last transformation and move toward the first.

Real-Life Example:
Imagine a scenario where you have multiple operations on a dataset, such as transforming data, filtering it, and then sorting it.
Using compose, you can easily combine these steps.


const square = x => x * x;
const double = x => x * 2;
const addFive = x => x + 5;
const processNumber = compose(addFive, double, square);

console.log(processNumber(3)); // (3^2) * 2 + 5 = 14

Using compose for Data Transformation

You can compose several data transformation functions together. This is especially useful for pipeline-like workflows or
transforming an input through several stages.

const toUpperCase = str => str.toUpperCase();
const appendExclamation = str => str + "!";
const addGreeting = str => "Hello, " + str;
const transform = compose(appendExclamation, toUpperCase, addGreeting);
console.log(transform("world")); // "HELLO, WORLD!"


another example:

const filterEvenNumbers = arr => arr.filter(x => x % 2 === 0);
const squareNumbers = arr => arr.map(x => x * x);
const sortNumbers = arr => arr.sort((a, b) => a - b);

const processNumbers = compose(sortNumbers, squareNumbers, filterEvenNumbers);

console.log(processNumbers([1, 2, 3, 4, 5, 6]));

// Output: [4, 16, 36]
