THIS:


this is a special keyword that refers to the context in which a function or method is executed.

1. Global Context

In the global execution context (i.e., outside any function or object method), this refers to the global object:

In Browsers: this refers to the window object.
In Node.js: this refers to the global object.


console.log(this); // In browsers, this logs the `window` object. In Node.js, it logs the `global` object.


2. Inside a Function (Non-Strict Mode)

In a regular function (not an arrow function) within non-strict mode, this refers to the global object (window in browsers, global in Node.js) 
if the function is called directly. However, if the function is a method of an object, this refers to the object.


function showThis() {
    console.log(this);
}
showThis(); // In browsers, this logs the `window` object.


When used as a method:


const obj = {
    name: 'Alice',
    greet: function() {
        console.log(this.name); // `this` refers to `obj`, so it logs 'Alice'.
    }
};
obj.greet(); // Logs 'Alice'


3. Inside a Function (Strict Mode)

In strict mode, this inside a function that is not called as a method will be undefined, rather than the global object.

Example:
"use strict";
function showThis() {
    console.log(this); // Logs `undefined` in strict mode.
}
showThis();

4. Inside an Arrow Function

Arrow functions do not have their own this context. Instead, they inherit this from their enclosing lexical context.

Example:

const obj = {
    name: 'Bob',
    greet: function() {
        const innerFunction = () => {
            console.log(this.name); // `this` refers to `obj` because arrow functions inherit `this`.
        };
        innerFunction();
    }
};
obj.greet(); // Logs 'Bob'

anotter example:

const obj = {
  name: 'Charlie',
  greet: () => {
    console.log(this.name); // `this` refers to the global object, not `obj`.
  }
};
obj.greet(); // Logs `undefined` because `this.name` is `undefined` in the global context.

In Example 1, this in the arrow function correctly refers to obj, so this.name is 'Bob'.
In Example 2, this in the arrow function refers to the global context, so this.name is undefined
because name is not a property of the global object.




5. In Object Methods

When this is used inside a method of an object, it refers to the object itself.

Example:

const person = {
    name: 'John',
    sayName: function() {
        console.log(this.name); // `this` refers to `person`, so it logs 'John'.
    }
};
person.sayName(); // Logs 'John'



6. In Class Methods

In a class method, this refers to the instance of the class.

Example:

class Car {
    constructor(make) {
        this.make = make;
    }
    displayMake() {
        console.log(this.make); // `this` refers to the Car instance.
    }
}

const myCar = new Car('Toyota');
myCar.displayMake(); // Logs 'Toyota'

Summary

Global Context: this refers to the global object (window in browsers, global in Node.js).
Functions (Non-Strict Mode): this refers to the global object or the object that owns the method.
Functions (Strict Mode): this is undefined.
Arrow Functions: this is inherited from the surrounding lexical context.
Object Methods: this refers to the object that the method is a part of.
Class Methods: this refers to the instance of the class.



Arrow Function

Arrow functions provide a concise way to write functions using the => syntax. They are always anonymous and have a different this
binding compared to traditional functions.

const subtract = (a, b) => a - b;

console.log(subtract(5, 3)); // Output: 2

Implicit Return: If the function body has a single expression, you can omit the curly braces and return keyword.
this Binding: Arrow functions do not have their own this; they inherit it from the surrounding context.
No arguments Object: Arrow functions do not have their own arguments object.





article: https://dmitripavlutin.com/when-not-to-use-arrow-functions-in-javascript/

1. Defining methods on an object


In JavaScript, the method is a function stored in a property of an object. When calling the method, this becomes the object that the method belongs to.

1a. Object literal

Since arrow function has a short syntax, it's inviting to use it for a method definition. Let's take a try:

const calculate = {
  array: [1, 2, 3],
  sum: () => {
    console.log(this === window); // => true
    return this.array.reduce((result, item) => result + item);
  }
};
console.log(this === window); // => true
// Throws "TypeError: Cannot read property 'reduce' of undefined"


calculate.sum();

calculate.sum method is defined with an arrow function. But on invocation calculate.sum() throws a TypeError, 
because this.array is evaluated to undefined.
When invoking the method sum() on the calculate object, the context remains window. It happens because the arrow function 
binds the context lexically with the window object.
Executing this.array is equivalent to window.array, which is undefined.

The solution is to use a function expression or shorthand syntax for method definition (available in ECMAScript 6).In such a case
this is determined by the invocation, but not by the enclosing context. Let's see the fixed version:

const calculate = {  
  array: [1, 2, 3],
  sum() {
    console.log(this === calculate); // => true
    return this.array.reduce((result, item) => result + item);
  }
};
calculate.sum(); // => 6

Because sum is a regular function, this on invocation of calculate.sum() is the calculate object.this.array is the
array reference, therefore the sum of elements is calculated correctly: 6.

1b. Object prototype

The same rule applies when defining methods on a prototype object.
Instead of using an arrow function for defining sayCatName method, which brings an incorrect context window:

function MyCat(name) {
  this.catName = name;
}
MyCat.prototype.sayCatName = () => {
  console.log(this === window); // => true
  return this.catName;
};
const cat = new MyCat('Mew');
cat.sayCatName(); // => undefined

use the old school function expression:

function MyCat(name) {
  this.catName = name;
}
MyCat.prototype.sayCatName = function() {
  console.log(this === cat); // => true
  return this.catName;
};
const cat = new MyCat('Mew');
cat.sayCatName(); // => 'Mew'

sayCatName regular function is changing the context to cat object when called as a method: cat.sayCatName().




2. Callback functions with dynamic context

this in JavaScript is a powerful feature. It allows changing the context depending on the way a function is called. Frequently the 
context is the target object on which invocation happens, making the code more natural. It says like "something is happening with this object".

However, the arrow function binds the context statically on the declaration and is not possible to make it dynamic. It's the other side of
the medal in a situation when lexical this is not necessary.

Attaching event listeners to DOM elements is a common task in client-side programming. An event triggers the handler function with 
this as the target element. Handy usage of the dynamic context.

The following example is trying to use an arrow function for such a handler:

const button = document.getElementById('myButton');
button.addEventListener('click', () => {
  console.log(this === window); // => true
  this.innerHTML = 'Clicked button';
//nside the event handler, this.innerHTML = 'Clicked button'; will change the content of the button from "Click Me" to "Clicked button".
});
this is window in an arrow function that is defined in the global context. When a click event happens, browser tries to 
invoke the handler function with button context, but arrow function does not change its pre-defined context.
this.innerHTML is equivalent to window.innerHTML and has no sense.

You have to apply a function expression, which allows to change this depending on the target element:

const button = document.getElementById('myButton');
button.addEventListener('click', function() {
  console.log(this === button); // => true
  this.innerHTML = 'Clicked button';
});
When user clicks the button, this in the handler function is button. Thus this.innerHTML = 'Clicked button' modifies correctly 
the button text to reflect clicked status.




3. Invoking constructors

this in a construction invocation is the newly created object. When executing new MyFunction(), the context of the constructor
MyFunction is a new object: this instanceof MyFunction === true.

Notice that an arrow function cannot be used as a constructor. JavaScript implicitly prevents from doing that by throwing an exception.
Anyway this is setup from the enclosing context and is not the newly created object. In other words, an arrow function constructor
invocation doesn't make sense and is ambiguous.

Let's see what happens if however trying to:

const Message = (text) => {
  this.text = text;
};
// Throws "TypeError: Message is not a constructor"
const helloMessage = new Message('Hello World!');

Executing new Message('Hello World!'), where Message is an arrow function, JavaScript throws a TypeError that Message cannot be used as a constructor.

I consider an efficient practice that ECMAScript 6 fails with verbose error messages in such situations. Contrary to fail silently
specific to previous JavaScript versions.

The above example is fixed using a function expression, which is the correct way (including the function declaration) to create constructors:

const Message = function(text) {
  this.text = text;
};
const helloMessage = new Message('Hello World!');
console.log(helloMessage.text); // => 'Hello World!'



4. Too short syntax

The arrow function has a nice property of omitting the arguments parenthesis (), block curly brackets {} and return if the function body has one 
statement. This helps in writing very short functions.

My university professor of programming gives students an interesting task: write the shortest function that counts the string length in C language. 
This is a good approach to study and explore a new language.

Nevertheless, in real-world applications, the code is read by many developers. The shortest syntax is not always appropriate to help your
colleague understand the function on the fly.

At some level the compressed function becomes difficult to read, so try not to get into passion. Let's see an example:

const multiply = (a, b) => b === undefined ? b => a * b : a * b;
const double = multiply(2);
double(3);      // => 6
multiply(2, 3); // => 6

multiply returns the multiplication result of two numbers or a closure tied with first parameter for later multiplication.
The function works nice and looks short. But it may be tough to understand what it does from the first look.

To make it more readable, it is possible to restore the optional curly braces and return statement from the arrow function or use a regular function:

function multiply(a, b) {
  if (b === undefined) {
    return function(b) {
      return a * b;
    }
  }
  return a * b;
}
const double = multiply(2);
double(3);      // => 6
multiply(2, 3); // => 6

It is good to find a balance between short and verbose to make your JavaScript straightforward.
