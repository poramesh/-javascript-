Synchronous vs Asynchronous


By default, JavaScript is a synchronous, single threaded programming language. This means that instructions can only run one after another,
and not in parallel. 

let a = 1;
let b = 2;
let sum = a + b;
console.log(sum);

The above code is pretty simple – it sums two numbers and then logs the sum to the browser console. The interpreter
executes these instructions one after another in that order until it is done.

the problems with synchronous JavaScript were addressed by introducing asynchronous JavaScript.

Think of asynchronous code as code that can start now, and finish its execution later. When JavaScript is running asynchronously,
the instructions are not necessarily executed one after the other as we saw before.



To further understand the asynchronous nature of JavaScript, we will go through callback functions, promises, and async and await.



What are Callbacks in JavaScript?

A callback is a function that is passed inside another function, and then
called in that function to perform a task.

Confusing? Let's break it down by practically implementing it.

console.log('fired first');
console.log('fired second');

setTimeout(()=>{
    console.log('fired third');
},2000);

console.log('fired last');


fired first
fired second
fired last
fired third

You see that the last instruction is logged before the function in the setTimeout returns its result. Say we used this 
method to fetch data from a database. While the user is waiting for the database call to return results, the flow in execution will not be interrupted.

This method was very efficient, but only to a certain point. Sometimes, developers have to make multiple calls to different sources
in their code. In order to make these calls, callbacks are being nested until they become very hard to read or maintain. This is referred to as Callback Hell

To fix this problem, promises were introduced.




Key Points about Asynchronous Callbacks:

Asynchronous Nature:

A callback function can be asynchronous if it is passed into an asynchronous operation, such as setTimeout(), setInterval(),
or even event handlers (e.g., button clicks).

When the asynchronous operation is completed (such as waiting for a timer or a network request), the callback is executed 
after the operation finishes, rather than immediately when the function is called.

No async or Promise Needed:

The asynchronous behavior of the callback is due to the fact that the function execution doesn't block the main thread.
The function that accepts the callback may use it later, after completing its asynchronous task.
For example, with setTimeout() or event listeners, the callback is executed after a delay or after a specific event happens.

Example without async or Promise:

In the following example, there is no async keyword or Promise involved, but the callback
is asynchronous because it executes after a delay (due to setTimeout).


Event-Driven Asynchronous Callbacks: Callbacks are often used in event-driven models where events like user input
(e.g., mouse clicks, keyboard events) or data fetching (e.g., network requests) trigger the callback once the event happens.

For example:

button.addEventListener('click', () => {
  console.log('Button clicked!');
});





What are Promises in JavaScript?


A promise, in our context, is something which will take some time to do. There are two possible outcomes of a promise:

We either run and resolve the promise, or
Some error occurs along the line and the promise is rejected

Promises came along to solve the problems of callback functions. A promise takes in two functions as parameters.
That is, resolve and reject. Remember that resolve is success, and reject is for when an error occurs.



const getData = (city) => {
    const apiKey = 'your_openweathermap_api_key'; // replace with your actual API key
    const dataEndpoint = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

    return new Promise((resolve, reject) => {
        fetch(dataEndpoint)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    reject(`Error: ${response.status} ${response.statusText}`);
                }
            })
            .then(data => resolve(data))
            .catch(error => reject(`Request failed: ${error}`));
    });
};

getData('New York')
    .then(data => {
        console.log(`Current temperature in ${data.name}: ${data.main.temp}°C`);
        console.log(`Weather: ${data.weather[0].description}`);
    })
    .catch(error => console.error('Error:', error));



Promises are a neat way to fix problems brought about by callback hell, in a method known as promise chaining. You can use
this method to sequentially get data from multiple endpoints, but with less code and easier methods.

But there is an even better way! You might be familiar with the following method, as it's a preferred way of handling data and API calls in JavaScript.






What is Async and Await in JavaScript?

The thing is, chaining promises together just like callbacks can get pretty bulky and confusing. That's why Async and Await was brought about.

To define an async function, you do this:

const asyncFunc = async() => {

}
Note that calling an async function will always return a Promise. Take a look at this:

const test = asyncFunc();
console.log(test); //Promise { undefined }

Running the above in the browser console, we see that the asyncFunc returns a promise.

another example:

const asyncFunc = async () => {
	const response = await fetch(resource);
   	const data = await response.json();
}

The async keyword is what we use to define async functions as I mentioned above. But how about await ? Well,
it stalls JavaScript from assigning fetch to the response variable until the promise has been resolved. Once the promise has been resolved,
the results from the fetch method can now be assigned to the response variable.

How Long Does await Last?
Duration: The duration that await lasts is exactly as long as it takes for the Promise to be resolved or rejected.

1. If the Promise resolves quickly, the await will wait for that short duration.
2. If the Promise takes a long time (e.g., fetching data from a remote server or performing a time-intensive calculation), the 
await will wait as long as it takes for the operation to complete.
3. If the Promise never resolves (e.g., due to a network error), the await will keep waiting indefinitely until a resolution or rejection occurs.


To Block Code or Not to Block Code

When I say 'stalling', you must think that implementing Async and Await somehow blocks code execution. Because what if our request takes too long, right?

Fact is, it doesn't. Code that is inside the async function is blocking, but that doesn't affect program execution in any way. 
The execution of our code is just as asynchronous as ever. To show this,

const asyncFunc = async () => {
	const response = await fetch(resource);
   	const data = await response.json();
}

console.log(1);
cosole.log(2);

asyncFunc().then(data => console.log(data));

console.log(3);
console.log(4);

In our browser console, the output of the above would look something like this:

1
2
3
4
data returned by asyncFunc , undefined by the code. 

You see that as we called asyncFunc, our code continued running until it was time for the function to return results.


