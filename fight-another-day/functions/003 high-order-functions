Use map when you want to transform an array
Use filter to select a subset of data from an array, and
Use reduce when you want to return a single value as a result.


Higher order functions are functions that take one or more functions as arguments, or return a function as their result.


// Callback function, passed as a parameter in the higher order function
function callbackFunction(){
    console.log('I am  a callback function');
}

// higher order function
function higherOrderFunction(func){
    console.log('I am higher order function')
    func()
}

higherOrderFunction(callbackFunction);



How Higher Order Functions Work?

So, suppose I want you to write a function that calculates the area and diameter of a circle. As a beginner, the first solution that
comes to our mind is to write each separate function to calculate area or diameter.

const radius = [1, 2, 3];
// function to calculate area of the circle
const calculateArea =  function (radius) {
    const output = [];
    for(let i = 0; i< radius.length; i++){
        output.push(Math.PI * radius[i] * radius[i]);
    }
    return output;
}
// function to calculate diameter of the circle
const calculateDiameter =  function (radius) {
    const output = [];
    for(let i = 0; i< radius.length; i++){
        output.push(2 * radius[i]);
    }
    return output;
}
console.log(calculateArea(radius));
console.log(calculateDiameter(radius))


But have you noticed the problem with the above code? Aren't we writing almost the same function again and again with slightly 
different logic? Also, the functions we have written aren't reusable, are they?

So, let's see how we can write the same code using HOFs:

const radius = [1, 2, 3];
// logic to clculate area
const area = function(radius){
    return Math.PI * radius * radius;
}
// logic to calculate diameter
const diameter = function(radius){
    return 2 * radius;
}
// a reusable function to calculate area, diameter, etc
const calculate = function(radius, logic){ 
    const output = [];
    for(let i = 0; i < radius.length; i++){
        output.push(logic(radius[i]))
    }
    return output;
}
console.log(calculate(radius, area));
console.log(calculate(radius, diameter));

the code that we have written using HOFs is concise and modular. Each function is doing its own job and we are not repeating anything here.

Suppose in the future if we want to write a program to calculate the circumference of the circle. We can simply write the logic
to calculate the circumference and pass it to the calculate() function.

const circumeference = function(radius){
    return 2 * Math.PI * radius;
}
console.log(calculate(radius, circumeference));



How to Use Higher Order Functions???

When working with arrays, you can use the map(), reduce(), filter(), and sort() functions to manipulate and transform data in an array.
When working with objects, you can use the Object.entries() function to create a new array from an object.
When working with functions, you can use the compose() function to create complex functions from simpler ones.


MAP()

The map() function takes an array of values and applies a transformation to each value in the array. It does not mutate the original array. 
It is often used to transform an array of data into a new array with a different structure.


Example 1: Suppose we want to add 10 to every element in a array. We can use the map() method to map over every element in the array to add 10 to it.

const arr = [1, 2, 3, 4, 5];
const output = arr.map((num) => num += 10)
console.log(arr); // [1, 2, 3, 4, 5]
console.log(output); // [11, 12, 13, 14, 15]

In the above example, arr is an array with five elements: 1, 2, 3, 4, and 5. map is a method that we use to apply a function
to each element in an array, and it returns a new array with the modified elements.

The callback function that is being passed to map uses the arrow function syntax, and it takes a single argument num. 
This function adds 10 to num (every element in the array) and returns the result.

Example 2: Here we have an array of users. Suppose we only want their first and last name. We can simply use the map() 
method to extract it from the users array.

const users = [
    {firstName: 'John', lastName: 'Doe', age: 25},
    {firstName: 'Jane', lastName: 'Doe', age: 30},
    {firstName: 'Jack', lastName: 'Doe', age: 35},
    {firstName: 'Jill', lastName: 'Doe', age: 40},
    {firstName: 'Joe', lastName: 'Doe', age: 45},
]

const result = users.map((user) => user.firstName + ' ' + user.lastName)
console.log(result); // ['John Doe', 'Jane Doe', 'Jack Doe', 'Jill Doe', 'Joe Doe']


The callback function takes a single argument user which represents an element in the users array (an object).


FILTER()

The filter() function takes an array and returns a new array with only the values that meet certain criteria. It also does 
not mutate the original array. It is often used to select a subset of data from an array based on certain criteria.

Example 1: You can use filter() to return only the odd numbers from an array of numbers.

const arr = [1, 2, 3, 4, 5];
const output = arr.filter((num) => num % 2) // filter out odd numbers
console.log(arr); // [1, 2, 3, 4, 5]
console.log(output); // [1, 3, 5]



Example 2: You can use filter() to return only the users having age greater than 30 in an array.

const users = [
    {firstName: 'John', lastName: 'Doe', age: 25},
    {firstName: 'Jane', lastName: 'Doe', age: 30},
    {firstName: 'Jack', lastName: 'Doe', age: 35},
    {firstName: 'Jill', lastName: 'Doe', age: 40},
    {firstName: 'Joe', lastName: 'Doe', age: 45},
]

// Find the users with age greater than 30
const output = users.filter(({age}) => age > 30)
console.log(output); // [{firstName: 'Jack', lastName: 'Doe', age: 35}, {firstName: 'Jill', lastName: 'Doe', age: 40}, {firstName: 'Joe', lastName: 'Doe', age: 45}]





REDUCE()

The reduce() method is kind of overwhelming. If you have came across reduce() method before and haven't understood it at first, it's totally fine.


In the case of the reduce() method, you should is used it when you want to perform some operation on the elements of an array and
return a single value as a result. The "single value" refers to the accumulated result of repeatedly applying a function to the elements of a sequence.


Example 1: Using reduce() to sum up all the elements in an array:

const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((total, currentValue) => {
    return total + currentValue;
}, 0)

console.log(sum); // 15



Example 2: Using reduce() to find the maximum value in an array:

let numbers = [5, 20, 100, 60, 1];
const maxValue = numbers.reduce((max, curr) => {
    if(curr > max) max = curr;
    return max;
});
console.log(maxValue); // 100

Example 3: Using reduce() to merge different objects in a single object:

const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };
const obj3 = { e: 5, f: 6 };
const mergedObj = [obj1, obj2, obj3].reduce((acc, curr) => {
    return { ...acc, ...curr };
}, {});

console.log(mergedObj); // { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 }


The function uses the spread operator (...) to create a new object that combines the properties of the current merged object acc and 
the current object curr. It then returns this new object.

In this case, the reduce() method will start by setting acc to an empty object (which is the value passed as the second argument 
to reduce()). It will then set curr to obj1, and create a new object that combines the properties of the empty object and obj1. 
It will then set curr to obj2 and create a new object that combines the properties of the previous merged object and obj2.


Example 4: Using reduce() to group objects in an array. For example, grouping products in a shopping cart according to their brand name.

const shoppingCart = [
    {name: 'Apple', price: 1.99, quantity: 3},
    {name: 'Apple', price: 1.99, quantity: 3},
    {name: 'Xiomi', price: 2.99, quantity: 2},
    {name: 'Samsung', price: 3.99, quantity: 1},
    {name: 'Tesla', price: 3.99, quantity: 1},
    {name: 'Tesla', price: 4.99, quantity: 4},
    {name: 'Nokia', price: 4.99, quantity: 4},
]

const products = shoppingCart.reduce((productGroup, product) => {
    const name = product.name;
    if(productGroup[name] == null) {
        productGroup[name] = [];
    }
    productGroup[name].push(product);

    return productGroup;
}, {});

console.log(products);

{
  Apple: [
    { name: 'Apple', price: 1.99, quantity: 3 },
    { name: 'Apple', price: 1.99, quantity: 3 }
  ],
  Xiomi: [ { name: 'Xiomi', price: 2.99, quantity: 2 } ],
  Samsung: [ { name: 'Samsung', price: 3.99, quantity: 1 } ],
  Tesla: [
    { name: 'Tesla', price: 3.99, quantity: 1 },
    { name: 'Tesla', price: 4.99, quantity: 4 }
  ],
  Nokia: [ { name: 'Nokia', price: 4.99, quantity: 4 } ]
}
