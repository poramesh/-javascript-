In Node.js, process.stdin is a stream that represents the standard input (stdin) in the process. Itâ€™s often used 
to handle user input directly from the command line or terminal.

How process.stdin Works

process.stdin is a readable stream that allows you to read data inputted by the user.
It works similarly to stdin in other programming environments (e.g., input() in Python or scanf in C).

example:

// Enable reading from stdin
process.stdin.setEncoding("utf8");

console.log("Enter something:");

// Listen for data from stdin
process.stdin.on("data", (data) => {
    console.log("You entered:", data.trim()); // Trim to remove any extra newline
    process.exit(); // End the process WINTESSSSSSSSSS
});

>process.stdin.setEncoding("utf8"); sets the encoding so input is interpreted as text (not a buffer).
>process.stdin.on("data", callback); listens for input. When the user types something and hits Enter, 
it triggers the callback, passing in the input as data.
>process.exit(); ends the process after the input is processed.





Using process.stdin for Continuous Input


process.stdin.setEncoding("utf8");
console.log("Enter lines of text (type 'exit' to quit):");

process.stdin.on("data", (data) => {
    const input = data.trim();
    if (input === "exit") {
        console.log("Goodbye!");
        process.exit();
    } else {
        console.log("You entered:", input);
    }
});




Example Input/Output:

Initial Prompt:

Enter lines of text (type "exit" to quit):

User Input 1:Hello
Output: You entered: Hello

User Input 2:How are you?
Output: You entered: How are you?

User Input 3 (Exiting the program):exit
Output: Goodbye!



Interactive Input Session


process.stdin.setEncoding('utf8');
console.log('Enter lines of text (type "exit" to quit):');

process.stdin.on('data', (data) => {
    const input = data.trim();
    
    // If the user types 'exit', we exit the program
    if (input === 'exit') {
        console.log('Goodbye!');
        process.stdin.pause(); // Stop reading from stdin WINTESSS
    } else {
        console.log('You entered:', input);
    }
});

// Keep the input stream open
process.stdin.resume();  //WTINESSSSS


process.stdin.resume(): This keeps the input stream active and allows the program to keep receiving input until process.stdin.pause() is called.


In Resume Mode: Each time the user presses Enter, the input line (including multiple words, if any) is processed.
In Pause Mode: If the input stream is paused, the data from Enter will not be processed until you call resume() again.



FREE FLOW AND RESUME MODE
In Node.js, when dealing with process.stdin, there are two main modes for reading input: Free Flow Mode and Resume Mode.
                                                        These modes refer to how data is read from the input stream.



                                                                
                                                                  
