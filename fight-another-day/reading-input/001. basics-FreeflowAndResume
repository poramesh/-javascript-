In Node.js, process.stdin is a stream that represents the standard input (stdin) in the process. It’s often used 
to handle user input directly from the command line or terminal.

How process.stdin Works

process.stdin is a readable stream that allows you to read data inputted by the user.
It works similarly to stdin in other programming environments (e.g., input() in Python or scanf in C).

example:

// Enable reading from stdin
process.stdin.setEncoding("utf8");

console.log("Enter something:");

// Listen for data from stdin
process.stdin.on("data", (data) => {
    console.log("You entered:", data.trim()); // Trim to remove any extra newline
    process.exit(); // End the process WINTESSSSSSSSSS
});

>process.stdin.setEncoding("utf8"); sets the encoding so input is interpreted as text (not a buffer).
>process.stdin.on("data", callback); listens for input. When the user types something and hits Enter, 
it triggers the callback, passing in the input as data.
>process.exit(); ends the process after the input is processed.





Using process.stdin for Continuous Input


process.stdin.setEncoding("utf8");
console.log("Enter lines of text (type 'exit' to quit):");

process.stdin.on("data", (data) => {
    const input = data.trim();
    if (input === "exit") {
        console.log("Goodbye!");
        process.exit();
    } else {
        console.log("You entered:", input);
    }
});




Example Input/Output:

Initial Prompt:

Enter lines of text (type "exit" to quit):

User Input 1:Hello
Output: You entered: Hello

User Input 2:How are you?
Output: You entered: How are you?

User Input 3 (Exiting the program):exit
Output: Goodbye!



Interactive Input Session


process.stdin.setEncoding('utf8');
console.log('Enter lines of text (type "exit" to quit):');

process.stdin.on('data', (data) => {
    const input = data.trim();
    
    // If the user types 'exit', we exit the program
    if (input === 'exit') {
        console.log('Goodbye!');
        process.stdin.pause(); // Stop reading from stdin WINTESSS
    } else {
        console.log('You entered:', input);
    }
});

// Keep the input stream open
process.stdin.resume();  //WTINESSSSS


process.stdin.resume(): This keeps the input stream active and allows the program to keep receiving input until process.stdin.pause() is called.


In Resume Mode: Each time the user presses Enter, the input line (including multiple words, if any) is processed.
In Pause Mode: If the input stream is paused, the data from Enter will not be processed until you call resume() again.



FREE FLOW AND RESUME MODE
In Node.js, when dealing with process.stdin, there are two main modes for reading input: Free Flow Mode and Resume Mode.
                                                        These modes refer to how data is read from the input stream.



Free flow:
Definition: In Free Flow mode, the input is read as it's received, character by character, and each line or piece of input is processed immediately.
This mode operates in a non-blocking way, meaning the program does not wait for input before continuing execution.

Trigger: The input is typically processed as soon as the user presses Enter (a new line is entered). You do not have to call
anything special for this mode; it's the default behavior when process.stdin is active.

When is it used?: This mode is useful when you want to read input as it comes in without pausing the process, 
such as when you're reading interactive input line by line.

process.stdin.setEncoding('utf8');
console.log('Enter text (type "exit" to quit):');

process.stdin.on('data', (data) => {
    const input = data.trim();
    if (input === 'exit') {
        console.log('Exiting program...');
        process.exit();
    } else {
        console.log('You entered:', input);
    }
});

                                                                
  In the above example:

The program waits for user input and processes each line as it's entered.
As soon as a user types something and presses Enter, the program reads that line and outputs it immediately.    




Resume Mode:

Definition: Resume mode is when the input stream is paused temporarily, and the program stops reading data from process.stdin.
After pausing the input stream with process.stdin.pause(), you can later resume it with process.stdin.resume() 
to continue reading data. While in this mode, the program does not process new input until it's resumed.

Trigger: You explicitly call process.stdin.resume() to re-enable input reading after it's been paused.

When is it used?: Resume mode is useful when you want to stop reading input temporarily and later continue reading again. 
This can be helpful for cases where you need to pause for some condition (like waiting for a task to finish) before reading further input.


Example with Pause and Resume:

process.stdin.setEncoding('utf8');
console.log('Enter lines of text (type "pause" to pause, "exit" to quit):');

process.stdin.on('data', (data) => {
    const input = data.trim();

    if (input === 'exit') {
        console.log('Exiting...');
        process.exit();
    } else if (input === 'pause') {
        console.log('Pausing input...');
        process.stdin.pause();  // Stop reading input
    } else {
        console.log('You entered:', input);
    }
});

// At some later point, you can resume reading
setTimeout(() => {
    console.log('Resuming input...');
    process.stdin.resume();  // Start reading input again
}, 5000);  // After 5 seconds


In the above example:

Free Flow Mode (initially):
The program reads input as the user types it and processes each line immediately.

Pause Mode (after typing pause):
The program stops reading input when process.stdin.pause() is called.

No further input is processed until the program resumes input with process.stdin.resume().
Resume Mode (after 5 seconds):

After the delay, the program resumes reading input from the user by calling process.stdin.resume(),
and the input is processed once again in Free Flow Mode.




Why Use Resume Mode?

Managing Input Timing: You may want to pause the input during certain conditions, like waiting for some asynchronous tasks to complete. 
For example, you may pause input reading while waiting for data from an API and then resume it once the data is received.

Resource Management: In certain scenarios, pausing input allows you to prevent unnecessary processing, especially if you're awaiting other tasks.










once it is in pause mode, the data thats entereed will not be read so just in case if you want those data to be stored some where you can use input array



let inputBuffer = [];  // This will store the buffered inputs

process.stdin.setEncoding('utf8');
console.log('Enter lines of text (type "pause" to pause, "resume" to resume, "exit" to quit):');

process.stdin.on('data', (data) => {
    const input = data.trim();

    if (input === 'exit') {
        console.log('Exiting program now...');
        process.stdin.pause();  // Pause input after 'exit'
        setTimeout(() => {
            console.log('Goodbye!');
            process.exit();  // Exit program after 2 seconds
        }, 2000);  // Delay exit for 2 seconds
    } else if (input === 'pause') {
        console.log('Pausing input...');
        process.stdin.pause();  // Pause input when 'pause' is typed
    } else if (input === 'resume') {
        console.log('Resuming input...');
        process.stdin.resume();  // Resume input when 'resume' is typed

        // After resuming, process the buffered inputs:
        if (inputBuffer.length > 0) {
            console.log('Processing buffered input:');
            inputBuffer.forEach((bufferedInput) => {
                console.log('Buffered:', bufferedInput);  // Process each buffered input
            });
            inputBuffer = [];  // Clear the buffer after processing
        }
    } else {
        if (process.stdin.isPaused()) {
            inputBuffer.push(input);  // Store input in buffer if paused
        } else {
            console.log('You entered:', input);  // Process the input immediately if not paused
        }
    }
});


Enter lines of text (type "pause" to pause, "resume" to resume, "exit" to quit):
Hello
You entered: Hello
pause
Pausing input...
hello
// No output (input is buffered)
resume
Resuming input...
Processing buffered input:
Buffered: hello
exit
Exiting program now...
Goodbye!





How process.stdin Handles Data:

Data Input: The user types input into the terminal and then presses Enter to submit the data.

Event Trigger: When Enter is pressed, it triggers the 'data' event, and the input (which includes the data entered before pressing Enter)
is passed to the callback function.

Processing Data: Inside the callback, the input is usually processed (e.g., trimmed, stored, or logged) after Enter is pressed,
as that's when the input is considered complete.

Buffering: If process.stdin is paused, the data will not be processed immediately. Instead, it will accumulate in the input
buffer until the stream is resumed.

Example Workflow:
The user types something (e.g., "hello"), and then presses Enter.
When Enter is pressed, the input ("hello") is sent to the program, triggering the 'data' event.
The callback function processes this input, possibly doing actions like logging, buffering, or further manipulation.
If process.stdin is paused, the event won't trigger further until you explicitly call .resume().

Why is Enter Important?
Enter signifies the end of a single line of input. Without pressing Enter, the program doesn't know 
that the user has finished entering that piece of data.
It’s the signal that indicates the input is complete and ready for processing.
