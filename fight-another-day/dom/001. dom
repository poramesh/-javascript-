When a web page is loaded, the browser creates a Document Object Model of the page.

The HTML DOM model is constructed as a tree of Objects:

Document
   |
  <html>
   |
  +--<head>
   |     |
   |    +--<meta>
   |     |
   |    +--<title>Title</title>
   |
  +--<body>
         |
      +--<header>
         |      |
         |     +--<h1>Main Title</h1>
         |      |
         |     +--<p>Introduction paragraph</p>
         |
      +--<nav>
         |      |
         |     +--<ul>
         |     |    |
         |     |   +--<li>Home</li>
         |     |    |
         |     |   +--<li>About</li>
         |     |    |
         |     |   +--<li>Contact</li>
         |
      +--<section>
         |       |
         |      +--<h2>Section Title</h2>
         |       |
         |      +--<p>Section content goes here</p>
         |       |
         |      +--<article>
         |             |
         |            +--<h3>Article Title</h3>
         |             |
         |            +--<p>Article content goes here</p>
         |
      +--<aside>
         |      |
         |     +--<p>Related Links</p>
         |
      +--<footer>
               |
              +--<p>Footer information</p>


With the object model, JavaScript gets all the power it needs to create dynamic HTML:


JavaScript can change all the HTML elements in the page
JavaScript can change all the HTML attributes in the page (a href="") href is atteibute and a is element
JavaScript can change all the CSS styles in the page
JavaScript can remove existing HTML elements and attributes
JavaScript can add new HTML elements and attributes
JavaScript can react to all existing HTML events in the page
JavaScript can create new HTML events in the page


What is the DOM?
The DOM is a W3C (World Wide Web Consortium) standard.

The DOM defines a standard for accessing documents:

"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and 
  scripts to dynamically access and update the content, structure, and style of a document."

The W3C DOM standard is separated into 3 different parts:

Core DOM - standard model for all document types
XML DOM - standard model for XML documents
HTML DOM - standard model for HTML documents

What is the HTML DOM?
  
The HTML DOM is a standard object model and programming interface for HTML. It defines:

The HTML elements as objects
The properties of all HTML elements
The methods to access all HTML elements
The events for all HTML elements
In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements


The DOM Programming Interface

The HTML DOM can be accessed with JavaScript (and with other programming languages).
In the DOM, all HTML elements are defined as objects.
The programming interface is the properties and methods of each object.
A property is a value that you can get or set (like changing the content of an HTML element).
A method is an action you can do (like add or deleting an HTML element).


example:

<html>
<body>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = "Hello World!";
</script>

</body>
</html>

  In the example above, getElementById is a method, while innerHTML is a property and the innerHTML property is 
  useful for getting or replacing the content of HTML elements and it can be usd to get or change any HTML
  elemntn, including <html> and <body>.


The HTML DOM Document Object

The document object represents your web page.
If you want to access any element in an HTML page, you always start with accessing the document object.


Finding HTML Elements
document.getElementById(id)	Find an element by element id
document.getElementsByTagName(name)	Find elements by tag name
document.getElementsByClassName(name)	Find elements by class name

changing HTML elements
1.Changing the inner HTML of an element (element.innerHTML):

<div id="content">Hello, world!</div>

<script>
    document.getElementById("content").innerHTML = "Welcome to my website!";
</script>

2. Changing an attribute value (element.attribute):

<img id="myImage" src="old_image.jpg" alt="Old Image">

<script>
    document.getElementById("myImage").src = "new_image.jpg";
</script>

3. CHanging the style of an html element(element.style.property):

<p id="myText">This is some text.</p>

<script>
    document.getElementById("myText").style.color = "blue";
</script>

4. using setAttribute to change an attribute:

<a id="myLink" href="https://old-link.com">Click me!</a>

<script>
    document.getElementById("myLink").setAttribute("href", "https://new-link.com");
</script>



  ADDING AND DELETING ELEMENTS

  1. Create an HTML element (document.createElement()):

<div id="container"></div>

<script>
    let newElement = document.createElement("p");
    newElement.innerHTML = "This is a new paragraph!";
    document.getElementById("container").appendChild(newElement);
</script>

A new paragraph with the text "This is a new paragraph!" is added inside the <div>.

2. Remove an HTML element (document.removeChild()):

<div id="container">
    <p id="para">This is a paragraph to be removed.</p>
</div>

<script>
    let container = document.getElementById("container");
    let paragraph = document.getElementById("para");
    container.removeChild(paragraph);
</script>

The paragraph with the text "This is a paragraph to be removed." is removed from the <div>.


3. Add an HTML element (document.appendChild()):


<ul id="myList">
    <li>Item 1</li>
</ul>

<script>
    let newItem = document.createElement("li");
    newItem.innerHTML = "Item 2";
    document.getElementById("myList").appendChild(newItem);
</script>

A new list item ("Item 2") is added to the unordered list.

4. Replace an HTML element (document.replaceChild()):

<div id="container">
    <p id="old">This is the old paragraph.</p>
</div>

<script>
    let newElement = document.createElement("p");
    newElement.innerHTML = "This is the new paragraph!";
    
    let container = document.getElementById("container");
    let oldElement = document.getElementById("old");
    
    container.replaceChild(newElement, oldElement);
</script>

The old paragraph is replaced by a new paragraph with the text "This is the new paragraph!".

5. Write into the HTML output stream (document.write()):


<script>
    document.write("<h2>This is written directly into the document!</h2>");
</script>

The text "This is written directly into the document!" is written directly into the HTML page as an <h2> heading.




  ADDING EVENT HANDLERS:

Adding event handler code to an onclick event
syntax: document.getElementById(id).onclick = function(){code}

<!DOCTYPE html>
<html>
<head>
    <title>Click Event Example</title>
</head>
<body>
    <button id="myButton">Click Me!</button>
    <p id="displayText"></p>

    <script>
        document.getElementById("myButton").onclick = function() {
            document.getElementById("displayText").innerHTML = "Button clicked!";
        };
    </script>
</body>
</html>




FINDING HTML OBJECTS:

1. document.anchors will returns all <a> elements that have a name attribute

  <body>
      <ul>
        <li><a href="#section1">Go to Section 1</a></li>
        <li><a href="#section2">Go to Section 2</a></li>
        <li><a href="#section3">Go to Section 3</a></li>
    </ul>
  </body>

       <script>
        // Using document.anchors to log the anchor elements
        const anchors = document.anchors;
        console.log("Anchors in this document:", anchors);

        // Displaying anchor names in the console
        for (let i = 0; i < anchors.length; i++) {
            console.log(`Anchor ${i + 1}:`, anchors[i].name);
        }
       </script>

o/p:
Anchors in this document: HTMLCollection(3) [a, a, a]
Anchor 1: section1
Anchor 2: section2
Anchor 3: section3


2. baseuri

     <p>
        The base URI of this document is: <span id="baseUri"></span>
    </p>
    <p>
        This link points to a relative URL: <a href="images/photo.jpg">View Photo</a>
    </p>

    <script>
        // Using document.baseURI to display the base URI
        const baseUri = document.baseURI;
        document.getElementById("baseUri").textContent = baseUri;

        // Logging the base URI to the console
        console.log("Base URI of the document:", baseUri);
    </script>

    Base URI of the document: file:///C:/path/to/your/example.html

BASE URI OF THIS DOC: 
//console
document.baseURI
'https://github.com/poramesh/-javascript-/new/main/fight-another-day'

What textContent Does?
  
Get Text Content: When you access textContent, it retrieves the text content of the element, 
excluding any HTML tags or child elements.

  document.getElementById("baseUri").textContent = baseUri;

Set Text Content: When you assign a value to textContent, it replaces any existing text
within that element with the new value. Any HTML tags within the text are treated as plain text and will 
not be rendered as HTML.

const currentText = document.getElementById("baseUri").textContent;

3. document.cokkie: Returns the document's cookie	

  '_octo=GH1.1.716026144.1722632559; color_mode=%7B%22color_mode%22%3A%22auto%22%2C%22light_theme%22%3A%7B%22name%22%3A%22light%22%2C%22color_mode%22%3A%22light%22%7D%2C%22dark_theme%22%3A%7B%22name%22%3A%22dark%22%2C%22color_mode%22%3A%22dark%22%7D%7D; preferred_color_mode=light; tz=Europe%2FLondon'


4. document.doctype: returns the documents doc type:

<!DOCTYPE html>

5. document.documentElement: return the <html> lement

returns all the html doc
  
6. document.documentURI: returns the URI of the document
  
'https://github.com/poramesh/-javascript-/new/main/fight-another-day'

7. document.domain: returns the domain name of the document.

github.com
  
8. document.forms: returns all the <form> element

  HTMLCollection(3)Â [form#query-builder-test-form, form#code-search-feedback-form, form#custom-scopes-dialog-form, query-builder-test-form: form#query-builder-test-form, code-search-feedback-form: form#code-search-feedback-form, custom-scopes-dialog-form: form#custom-scopes-dialog-form]

9. document.scripts	Returns all <script> elements

  returns the scripts in the document.
  document.scripts.length will return 87 for this page

10. document.title	Returns the <title> 

  'New File at fight-another-day Â· poramesh/-javascript-'

11. document.URL	Returns the complete URL of the document


  
'https://github.com/poramesh/-javascript-/new/main/fight-another-day'

  12. document.links	Returns all <area> and <a> elements that have a href attribute

  document.links
HTMLCollection(62)Â [a.p-3.color-bg-accent-emphasis.color-fg-on-emphasis.show-on-focus.js-skip-to-content, 
                    a#item-3b29a245-a4b9-4c9e-bed9-a9cb3ed8c3e8.ActionListContent.ActionListContent--visual16, 
.....]   
  
13. document.inputEncoding	Returns the document's encoding (character set)

  UTF-8
