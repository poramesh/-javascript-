for...in

Purpose: Used to iterate over the enumerable properties of an object.
Iteration: Iterates over the keys (or property names) of an object.
Applicable To: Objects, Arrays (iterates over array indices as strings).

for (let key in object) {
    console.log(key, object[key]);
}

const person = { name: 'Alice', age: 25, city: 'Wonderland' };

for (let key in person) {
    console.log(key, person[key]);
}

// Output:
// name Alice
// age 25
// city Wonderland

const numbers = [10, 20, 30];

for (let index in numbers) {
    console.log(index, numbers[index]);
}

// Output:
// 0 10
// 1 20
// 2 30


for...of

Purpose: Used to iterate over the values of iterable objects (e.g., arrays, strings, sets, maps).
Iteration: Iterates over the values of the iterable object.
Applicable To: Arrays, Strings, Sets, Maps, other iterable objects (not objects with key-value pairs).

for (let value of iterable) {
    console.log(value);
}

const numbers = [10, 20, 30];

for (let number of numbers) {
    console.log(number);
}

// Output:
// 10
// 20
// 30

const str = 'hello';

for (let char of str) {
    console.log(char);
}

// Output:
// h
// e
// l
// l
// o



key differences:

Iteration Focus:

for...in: Iterates over keys or property names of an object (or array indices as strings). Useful for objects but not ideal for arrays.
for...of: Iterates over values of an iterable object. Ideal for arrays, strings, and other iterable collections.

Iterables vs. Objects:

for...in: Can be used with objects and arrays but is mainly intended for objects. When used with arrays, it iterates over indices (as strings),
which is less intuitive for numeric array values.
for...of: Designed specifically for iterable objects and does not work with plain objects.

Order:

for...in: Does not guarantee the order of iteration for object properties.
for...of: Iterates in the order of the elements in the iterable (e.g., numerical order for arrays).


________
foreach
_________

The forEach method in JavaScript is an array method that allows you to execute a provided function once for each array element. It’s often
used for iterating over arrays and performing operations on each item.

Syntax
array.forEach(callback(currentValue [, index [, array]])[, thisArg]);

Parameters

callback: A function that is executed for each element in the array. It takes up to three arguments:

currentValue: The value of the current element being processed in the array.
index (optional): The index of the current element being processed in the array.
array (optional): The array that forEach is being applied to.
thisArg (optional): A value to use as this when executing the callback function.

Key Points

Returns: undefined. The forEach method does not return a new array; it simply iterates over the elements.

Modifies Array: If you modify the array within the callback, those modifications will be reflected in the array.

Cannot Break: Unlike traditional for loops, forEach cannot be exited before it completes its iteration over all elements.
If you need to break out of the loop early, consider using a for loop or for...of.
Example 

const numbers = [1, 2, 3, 4, 5];

numbers.forEach(function(number) {
    console.log(number);
});

// Output:
// 1
// 2
// 3
// 4
// 5


With Index and Array

const fruits = ['apple', 'banana', 'cherry'];

fruits.forEach(function(fruit, index, array) {
    console.log(`${index}: ${fruit}`);
    // Output: 
    // 0: apple
    // 1: banana
    // 2: cherry
});


Using Arrow Function

const numbers = [10, 20, 30];

numbers.forEach(value => console.log(value));

// Output:
// 10
// 20
// 30

Modifying Array Elements


const numbers = [1, 2, 3, 4, 5];

numbers.forEach((value, index, array) => {
    array[index] = value * 2;
});

console.log(numbers); // Output: [2, 4, 6, 8, 10]

Comparison with Other Iteration Methods

forEach vs. for...of:

forEach is specific to arrays and provides access to the current element, index, and array,
but it doesn’t allow breaking out of the loop early.
for...of can be used with any iterable and allows breaking out of the loop with break or return.

forEach vs. map:

forEach is used for side effects and does not return a new array.
map creates a new array with the results of calling a provided function on every element in the calling array.













