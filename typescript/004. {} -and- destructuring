In React, the curly braces {} serve two purposes:

1. JSX Expressions

In JSX (JavaScript XML), curly braces are used to embed expressions within the markup. You can write JavaScript expressions inside the braces,
and these expressions will be evaluated and rendered inside the JSX.

For example:

const name = "John";
const greeting = <h1>Hello, {name}!</h1>;

Here, {name} is a JavaScript expression inside JSX. The value of name will be inserted at that location in the HTML.


2. Destructuring in Props

When passing props to a React component, the props are usually passed as an object. React allows you to destructure this object in
the function signature, so you can directly access specific properties from the object.

For example, when you write:

const Card = ({ children }: { children: React.ReactNode }) => {
  return <div>{children}</div>;
};

The {children } is destructuring the props object, meaning you are directly extracting the children property from the props object.


This is equivalent to:

const Card = (props: { children: React.ReactNode }) => {
  return <div>{props.children}</div>;
};

But with destructuring, it's shorter and more convenient.

({ children }): Destructuring the children property from the props object passed to the component.
: { children: React.ReactNode }: The type of the props object (which contains children) is specified here, so TypeScript knows that children must be of type React.ReactNode.


Why do we use React.ReactNode?

React.ReactNode is used to type the children prop because children can be various types of content, such as:
Text (e.g., "Hello, World")
Elements (e.g., <div></div>)
Arrays of elements (e.g., [<div></div>, <span></span>])
Fragments (e.g., <></></>)
null or undefined (which React can render as nothing)

Using React.ReactNode allows us to accept any of these content types, making the children prop very flexible.


Example with multiple props:

If your component has many props, like title, description, and onSubmit, you can destructure all of them:

type CardProps = {
  title: string;
  description: string;
  onSubmit: () => void;
};

const Card = ({ title, description, onSubmit }: CardProps) => {
  return (
    <div>
      <h1>{title}</h1>
      <p>{description}</p>
      <button onClick={onSubmit}>Submit</button>
    </div>
  );
};




This way, you only need to reference title, description, and onSubmit directly inside the component,
rather than writing props.title, props.description, and props.onSubmit.


Where is the return type?

In this example, the return type is implicitly inferred by TypeScript. This means that TypeScript automatically determines the return
type based on what the function is returning (which in this case is JSX, i.e., React elements).

By default, the return type of a React functional component is JSX.Element. However, you can explicitly specify it.

const Card = ({ title, children }: { title: string, children: React.ReactNode }): JSX.Element => {
  return (
    <div className="card">
      <h1>{title}</h1>
      <div>{children}</div>
    </div>
  );
};



______________________________________________________________________________________________________________________________________________


In normal JavaScript, destructuring allows you to extract values from objects or arrays and assign them to variables in a concise manner.


1. Object Destructuring

When you have an object and you want to extract some properties from it into variables, 
you can use object destructuring.

const person = {
  name: "John",
  age: 30,
  city: "New York"
};

// Destructuring the object
const { name, age, city } = person;

console.log(name); // Output: John
console.log(age);  // Output: 30
console.log(city); // Output: New York

The curly braces {} are used to specify which properties of the person object you want to extract.
The variable names (e.g., name, age, city) are assigned the corresponding values from the object.

Default values with object destructuring:
You can also provide default values for destructured properties in case the property is undefined.

const person = { name: "John" };

// Providing a default value for age
const { name, age = 25 } = person;

console.log(name); // Output: John
console.log(age);  // Output: 25 (default value since age is not in the object)



2. Array Destructuring
With arrays, destructuring works similarly. You can extract values from arrays and assign them to variables.

Example:
const numbers = [10, 20, 30];

// Destructuring the array
const [first, second, third] = numbers;

console.log(first);  // Output: 10
console.log(second); // Output: 20
console.log(third);  // Output: 30

The square brackets [] are used to extract values from the array, and the variables (first, second, third) hold the corresponding values.

Skipping elements:
You can skip elements when destructuring by leaving a blank space (using a comma).

const numbers = [10, 20, 30, 40];
// Skipping the second element
const [first, , third] = numbers;

console.log(first);  // Output: 10
console.log(third);  // Output: 30


3. Swapping Variables with Destructuring
You can also use destructuring to swap values of two variables in a single line.

Example:
let a = 1;
let b = 2;

// Swapping values using destructuring
[a, b] = [b, a];

console.log(a); // Output: 2
console.log(b); // Output: 1


4. Rest Syntax with Destructuring
The rest syntax ... can be used with destructuring to collect the remaining elements or properties into a single variable.
Example with Object:

const person = { name: "John", age: 30, city: "New York", job: "Developer" };

// Collect the remaining properties into `otherDetails`
const { name, age, ...otherDetails } = person;

console.log(name);  // Output: John
console.log(age);   // Output: 30
console.log(otherDetails); // Output: { city: "New York", job: "Developer" }

Example with Array:
const numbers = [1, 2, 3, 4, 5];

// Collect the remaining elements into `rest`
const [first, second, ...rest] = numbers;

console.log(first);  // Output: 1
console.log(second); // Output: 2
console.log(rest);   // Output: [3, 4, 5]


5. Nested Destructuring
Destructuring can also be nested, allowing you to extract values from objects or arrays within objects or arrays.

Example with Nested Objects:

const person = {
  name: "John",
  address: {
    city: "New York",
    zip: "10001"
  }
};

// Nested destructuring
const { name, address: { city, zip } } = person;

console.log(name); // Output: John
console.log(city); // Output: New York
console.log(zip);  // Output: 10001


Example with Nested Arrays:
 
// Nested destructuring for array
const [first, [second, third], fourth] = numbers;

console.log(first);  // Output: 1
console.log(second); // Output: 2
console.log(third);  // Output: 3
console.log(fourth); // Output: 4



6. Destructuring in Function Parameters
You can also destructure objects and arrays directly in function parameters.

Example with Objects:

const person = { name: "John", age: 30 };

function greet({ name, age }) {
  console.log(`Hello, ${name}. You are ${age} years old.`);
}

greet(person); // Output: Hello, John. You are 30 years old.

Example with Arrays:

const numbers = [10, 20, 30];

function sum([a, b, c]) {
  return a + b + c;
}
console.log(sum(numbers)); // Output: 60

