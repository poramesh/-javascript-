Let's build a simple Todo App with TypeScript. We'll walk through it step by step, breaking down each part of the app to keep things clear.


****THANK YOU CHATTEIEE GPTT********

Hereâ€™s the plan for our app:

1. Setting up the environment
First, make sure you have Node.js installed.
We'll use React with TypeScript to build the app. You can create a new React project with TypeScript using create-react-app.


2. Creating the Project
Let's start by setting up the project using Create React App.

npx create-react-app@latest todo-app --template typescript
cd todo-app

This will create a new React project with TypeScript. Now, letâ€™s start building the Todo App.



3. Project Structure
The basic structure of the app could look like this:

/src
  /components
    TodoApp.tsx
    TodoItem.tsx
  App.tsx
  index.tsx
  styles.css




4. Defining Types for Todo
We will create a Todo type that will represent each task in the app.

// src/types.ts
export type Todo = {
  id: number;
  text: string;
  completed: boolean;
};




5. Building the TodoItem Component
This component will represent a single todo item.


**********
onToggle is a custom prop that you are defining.
It is not a built-in function in React or JavaScript; itâ€™s just a function prop you are passing down to the TodoItem component.

The function signature (id: number) => void means:
It accepts a single argument called id of type number.
It does not return anything (void).

2. Why isnâ€™t onToggle() written with parentheses?
If you write onToggle() with parentheses like this:

onToggle();

You are calling the function immediately.
This would trigger the function as soon as the code is evaluated, which is not what you want in this case.
Instead, you pass the function reference (not call it) to the prop:

onToggle: (id: number) => void; // Passing a function type

3. Where is onToggle used?
When onToggle is passed to a child component (like TodoItem), it gets called inside that component when an event occurs. 

For example:

<TodoItem
  todo={todo}
  onToggle={toggleTodo}
  onDelete={deleteTodo}
/>

Here:
onToggle is assigned the toggleTodo function (defined in the parent component).
Inside TodoItem, you might see something like this:

<button onClick={() => onToggle(todo.id)}>Toggle</button>

When the button is clicked:
onToggle is called with the todo.id as an argument.

4. How is it different from a built-in function?
Built-in React events like onClick, onChange, etc., are part of React's core API.
Your onToggle is just a custom function you defined to handle toggling the "completed" state of a todo.
Example Comparison
Built-in Event:

<button onClick={() => console.log("Clicked!")}>Click Me</button>
onClick is built into React.

Custom Prop:

<TodoItem todo={todo} onToggle={toggleTodo} />
onToggle is a custom function passed as a prop.

5. Summary
onToggle is a custom function prop.
It is passed as a reference to the child component and invoked when needed (e.g., on a button click).
Itâ€™s not written with parentheses initially because you are passing the function, not calling it directly.
Let me know if youâ€™d like further clarification! ðŸ˜Š



and nore on ReacT.FC


type TodoItemProps = {
  todo: { id: number; text: string; completed: boolean };
  onToggle: (id: number) => void;
  onDelete: (id: number) => void;
};

const TodoItem = ({ todo, onToggle, onDelete }: TodoItemProps) => {
  return <div>{todo.text}</div>;
};

When to Use React.FC
Use React.FC when you want the automatic inclusion of children and are okay with its default behavior.
Avoid it for components that donâ€™t deal with children or when using generics.

1 When you use React.FC<TodoItemProps>, TypeScript ensures that the component receives props of the specified type (TodoItemProps in this case)
Here, TodoItemProps ensures todo, onToggle, and onDelete are passed in with the correct structure.

2. React.FC automatically adds the children prop to the componentâ€™s props, even if you donâ€™t explicitly define it.

3 React.FC ensures that your functional component returns a valid React element.



Cons of React.FC
1. children Prop Might Be Unwanted:
Even if your component doesnâ€™t use children, itâ€™s still part of the props type, which can sometimes be confusing.
2. Doesnâ€™t Work Well With Generics:
When using generic props, React.FC can sometimes create type inference issues.
3. Less Explicit Return Type:
With React.FC, you lose a bit of control over the return type, as itâ€™s always assumed to be React.ReactElement.


without React.FC
type TodoItemProps = {
  todo: { id: number; text: string; completed: boolean };
  onToggle: (id: number) => void;
  onDelete: (id: number) => void;
};

const TodoItem = ({ todo, onToggle, onDelete }: TodoItemProps) => {
  return <div>{todo.text}</div>;
};


*****************





// src/components/TodoItem.tsx
import React from "react";
import { Todo } from "../types";

type TodoItemProps = {
  todo: Todo;
  onToggle: (id: number) => void;
  onDelete: (id: number) => void;
};

const TodoItem: React.FC<TodoItemProps> = ({ todo, onToggle, onDelete }) => {
  return (
    <div className="todo-item">
      <span
        style={{ textDecoration: todo.completed ? "line-through" : "none" }}
        onClick={() => onToggle(todo.id)}
      >
        {todo.text}
      </span>
      <button onClick={() => onDelete(todo.id)}>Delete</button>
    </div>
  );
};

export default TodoItem;


*****plain js would look like this

import React from "react";

const TodoItem = ({ todo, onToggle, onDelete }) => {
  return (
    <div className="todo-item">
      <span
        style={{ textDecoration: todo.completed ? "line-through" : "none" }}
        onClick={() => onToggle(todo.id)}
      >
        {todo.text}
      </span>
      <button onClick={() => onDelete(todo.id)}>Delete</button>
    </div>
  );
};

export default TodoItem;

*******


6. Building the TodoApp Component

This component will hold the list of todos and the logic to add, toggle, and delete todos.

// src/components/TodoApp.tsx
import React, { useState } from "react";
import { Todo } from "../types";
import TodoItem from "./TodoItem";

const TodoApp: React.FC = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [newTodoText, setNewTodoText] = useState<string>("");

  // Add a new todo
  const addTodo = () => {
    if (newTodoText.trim()) { //This means it strips off any spaces, tabs, or line breaks from the start and end of the string, " Hello World ".trim() would result in "Hello World".
      const newTodo: Todo = {
        id: Date.now(),  // Using the current timestamp as the ID
        text: newTodoText,
        completed: false,
      };
      setTodos([...todos, newTodo]);                    
//const todos = [1, 2, 3]; const newTodo = 4; const updatedTodos = [...todos, newTodo]; console.log(updatedTodos); // Output: [1, 2, 3, 4]
      setNewTodoText(""); // Clear input field
    }
  };

  // Toggle completion of a todo
  const toggleTodo = (id: number) => {
    setTodos(todos.map(todo => 
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  // Delete a todo
  const deleteTodo = (id: number) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  return (
    <div className="todo-app">
      <h1>Todo App</h1>
      <input
        type="text"
        value={newTodoText}
        onChange={(e) => setNewTodoText(e.target.value)}
        placeholder="Add a new todo"
      />
      <button onClick={addTodo}>Add Todo</button>

      <div className="todo-list">
        {todos.map((todo) => (
          <TodoItem
            key={todo.id}
            todo={todo}
            onToggle={toggleTodo}
            onDelete={deleteTodo}
          />
        ))}
      </div>
    </div>
  );
};

export default TodoApp;



7. Integrating the TodoApp in the Main App
Now, letâ€™s integrate the TodoApp component into the main App.tsx.

// src/App.tsx
import React from "react";
import TodoApp from "./components/TodoApp";
import "./styles.css";

const App: React.FC = () => {
  return (
    <div className="App">
      <TodoApp />
    </div>
  );
};

export default App;




8. Styling the Todo App
Hereâ€™s a simple styles.css to make the app look a little nicer.

/* src/styles.css */

.App {
  text-align: center;
  padding: 20px;
}

.todo-app {
  max-width: 400px;
  margin: 0 auto;
}

.todo-list {
  margin-top: 20px;
}

.todo-item {
  display: flex;
  justify-content: space-between;
  margin: 10px 0;
}

.todo-item span {
  cursor: pointer;
}

button {
  background-color: red;
  color: white;
  border: none;
  cursor: pointer;
  padding: 5px 10px;
  border-radius: 5px;
}

button:hover {
  background-color: darkred;
}



9. Running the Application
Now, you can run your app using:

npm start
This will open the app in your browser. You'll have a fully functional Todo app where you can:

Add Todos â€“ By typing in the input box and clicking "Add Todo".
Toggle Todos â€“ By clicking on the todo item.
Delete Todos â€“ By clicking the "Delete" button.











_________________________________________________________________________











Let's enhance our Todo App by adding the following features:

Persist Data: Save todos to localStorage so the data persists even after refreshing the page.
Edit Todos: Add an option to edit a todo item.
Mark All as Completed: Add a button to mark all todos as completed at once.
Filters: Add filters to view "All", "Active", or "Completed" todos.

1. Persist Data to localStorage

To make the todos persist even after refreshing the page, we need to load the todos from localStorage on app load and save 
them back to localStorage whenever they are updated.

Modifying TodoApp to Persist Data
Load Todos from localStorage: On component mount, load the todos from localStorage.
Save Todos to localStorage: Whenever the todos change, save the updated list to localStorage.




****************
What is localStorage?
>localStorage is a part of the Web Storage API that allows websites to store data in the browser persistently
(even if the user closes the browser or navigates to another page).
>The data stored in localStorage is stored as key-value pairs, where both the key and the value are strings.
>The data does not expire and remains in the browser's storage until it is cleared by the user or explicitly removed by the web application.


localStorage.getItem("todos")
The method getItem() retrieves a value from localStorage by its key.
In this case, getItem("todos") is looking for the value stored under the key "todos".


Storing Data:
Before you can retrieve the todos, you need to store it in localStorage. 
For example:

const todos = ["Buy groceries", "Do homework", "Clean the house"];
localStorage.setItem("todos", JSON.stringify(todos));

Here, the todos array is converted to a JSON string using JSON.stringify() and then stored in 
localStorage under the key "todos".

Retrieving Data:
Later, you can retrieve the stored data:

const savedTodos = localStorage.getItem("todos");
console.log(savedTodos); // This will log the stringified array, e.g., '["Buy groceries", "Do homework", "Clean the house"]'


Parsing Data:

Since localStorage only stores strings, the retrieved value (in savedTodos) is still a string. If it was an 
object or array, youâ€™ll need to parse it back to the original format using JSON.parse():

const todosArray = JSON.parse(savedTodos);
console.log(todosArray);  // This will log the array: ["Buy groceries", "Do homework", "Clean the house"]


*******************

// src/components/TodoApp.tsx
import React, { useState, useEffect } from "react";
import { Todo } from "../types";
import TodoItem from "./TodoItem";

const TodoApp: React.FC = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [newTodoText, setNewTodoText] = useState<string>("");

  // Load todos from localStorage when the component mounts
  useEffect(() => {
    const savedTodos = localStorage.getItem("todos");
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos));
    }
  }, []);

  // Save todos to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos));
  }, [todos]);

  // Add a new todo
  const addTodo = () => {
    if (newTodoText.trim()) {
      const newTodo: Todo = {
        id: Date.now(),
        text: newTodoText,
        completed: false,
      };
      setTodos([...todos, newTodo]);
      setNewTodoText(""); // Clear input field
    }
  };

  // Toggle completion of a todo
  const toggleTodo = (id: number) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  // Delete a todo
  const deleteTodo = (id: number) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  return (
    <div className="todo-app">
      <h1>Todo App</h1>
      <input
        type="text"
        value={newTodoText}
        onChange={(e) => setNewTodoText(e.target.value)}
        placeholder="Add a new todo"
      />
      <button onClick={addTodo}>Add Todo</button>

      <div className="todo-list">
        {todos.map((todo) => (
          <TodoItem
            key={todo.id}
            todo={todo}
            onToggle={toggleTodo}
            onDelete={deleteTodo}
          />
        ))}
      </div>
    </div>
  );
};

export default TodoApp;




2. Edit Todos
Now let's add an option to edit a todo. We'll add an "Edit" button next to each todo, and when clicked, it will allow you to edit the todo text.

Modifying the TodoItem Component
Add an "Edit" button that will toggle between "Edit" and "Save" modes.

// src/components/TodoItem.tsx
import React, { useState } from "react";
import { Todo } from "../types";

type TodoItemProps = {
  todo: Todo;
  onToggle: (id: number) => void;
  onDelete: (id: number) => void;
  onEdit: (id: number, newText: string) => void;
};

const TodoItem: React.FC<TodoItemProps> = ({ todo, onToggle, onDelete, onEdit }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editText, setEditText] = useState(todo.text);

  const handleEditClick = () => {
    if (isEditing) {
      onEdit(todo.id, editText);
    }
    setIsEditing(!isEditing);
  };

  return (
    <div className="todo-item">
      {isEditing ? (
        <input
          type="text"
          value={editText}
          onChange={(e) => setEditText(e.target.value)}
        />
      ) : (
        <span
          style={{ textDecoration: todo.completed ? "line-through" : "none" }}
          onClick={() => onToggle(todo.id)}
        >
          {todo.text}
        </span>
      )}
      <button onClick={handleEditClick}>{isEditing ? "Save" : "Edit"}</button>
      <button onClick={() => onDelete(todo.id)}>Delete</button>
    </div>
  );
};

export default TodoItem;
Modifying the TodoApp Component to Handle Editing
We need to handle the edit logic in TodoApp. We'll pass the onEdit function as a prop to TodoItem.

tsx
Copy code
// src/components/TodoApp.tsx
import React, { useState, useEffect } from "react";
import { Todo } from "../types";
import TodoItem from "./TodoItem";

const TodoApp: React.FC = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [newTodoText, setNewTodoText] = useState<string>("");

  // Load todos from localStorage when the component mounts
  useEffect(() => {
    const savedTodos = localStorage.getItem("todos");
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos));
    }
  }, []);

  // Save todos to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos));
  }, [todos]);

  // Add a new todo
  const addTodo = () => {
    if (newTodoText.trim()) {
      const newTodo: Todo = {
        id: Date.now(),
        text: newTodoText,
        completed: false,
      };
      setTodos([...todos, newTodo]);
      setNewTodoText(""); // Clear input field
    }
  };

  // Toggle completion of a todo
  const toggleTodo = (id: number) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  // Delete a todo
  const deleteTodo = (id: number) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  // Edit a todo
  const editTodo = (id: number, newText: string) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, text: newText } : todo
    ));
  };

  return (
    <div className="todo-app">
      <h1>Todo App</h1>
      <input
        type="text"
        value={newTodoText}
        onChange={(e) => setNewTodoText(e.target.value)}
        placeholder="Add a new todo"
      />
      <button onClick={addTodo}>Add Todo</button>

      <div className="todo-list">
        {todos.map((todo) => (
          <TodoItem
            key={todo.id}
            todo={todo}
            onToggle={toggleTodo}
            onDelete={deleteTodo}
            onEdit={editTodo}
          />
        ))}
      </div>
    </div>
  );
};

export default TodoApp;
3. Mark All as Completed
Weâ€™ll add a button to mark all todos as completed at once.

tsx
Copy code
// src/components/TodoApp.tsx
import React, { useState, useEffect } from "react";
import { Todo } from "../types";
import TodoItem from "./TodoItem";

const TodoApp: React.FC = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [newTodoText, setNewTodoText] = useState<string>("");

  // Load todos from localStorage when the component mounts
  useEffect(() => {
    const savedTodos = localStorage.getItem("todos");
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos));
    }
  }, []);

  // Save todos to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos));
  }, [todos]);

  // Add a new todo
  const addTodo = () => {
    if (newTodoText.trim()) {
      const newTodo: Todo = {
        id: Date.now(),
        text: newTodoText,
        completed: false,
      };
      setTodos([...todos, newTodo]);
      setNewTodoText(""); // Clear input field
    }
  };

  // Toggle completion of a todo
  const toggleTodo = (id: number) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  // Delete a todo
  const deleteTodo = (id: number) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  // Edit a todo
  const editTodo = (id: number, newText: string) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, text: newText } : todo
    ));
  };

  // Mark all todos as completed
  const markAllCompleted = () => {
    setTodos(todos.map(todo => ({ ...todo, completed: true })));
  };

  return (
    <div className="todo-app">
      <h1>Todo App</h1>
      <input
        type="text"
        value={newTodoText}
        onChange={(e) => setNewTodoText(e.target.value)}
        placeholder="Add a new todo"
      />
      <button onClick={addTodo}>Add Todo</button>
      <button onClick={markAllCompleted}>Mark All Completed</button>

      <div className="todo-list">
        {todos.map((todo) => (
          <TodoItem
            key={todo.id}
            todo={todo}
            onToggle={toggleTodo}
            onDelete={deleteTodo}
            onEdit={editTodo}
          />
        ))}
      </div>
    </div>
  );
};

export default TodoApp;
4. Filters
Letâ€™s add filters to show "All", "Active", or "Completed" todos.

We'll add buttons to toggle between filters.

tsx
Copy code
// src/components/TodoApp.tsx
import React, { useState, useEffect } from "react";
import { Todo } from "../types";
import TodoItem from "./TodoItem";

type Filter = "all" | "active" | "completed";

const TodoApp: React.FC = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [newTodoText, setNewTodoText] = useState<string>("");
  const [filter, setFilter] = useState<Filter>("all");

  // Load todos from localStorage when the component mounts
  useEffect(() => {
    const savedTodos = localStorage.getItem("todos");
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos));
    }
  }, []);

  // Save todos to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos));
  }, [todos]);

  // Add a new todo
  const addTodo = () => {
    if (newTodoText.trim()) {
      const newTodo: Todo = {
        id: Date.now(),
        text: newTodoText,
        completed: false,
      };
      setTodos([...todos, newTodo]);
      setNewTodoText(""); // Clear input field
    }
  };

  // Toggle completion of a todo
  const toggleTodo = (id: number) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  // Delete a todo
  const deleteTodo = (id: number) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  // Edit a todo
  const editTodo = (id: number, newText: string) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, text: newText } : todo
    ));
  };

  // Mark all todos as completed
  const markAllCompleted = () => {
    setTodos(todos.map(todo => ({ ...todo, completed: true })));
  };

  // Filter todos based on the selected filter
  const filteredTodos = todos.filter(todo => {
    if (filter === "all") return true;
    if (filter === "active") return !todo.completed;
    if (filter === "completed") return todo.completed;
    return true;
  });

  return (
    <div className="todo-app">
      <h1>Todo App</h1>
      <input
        type="text"
        value={newTodoText}
        onChange={(e) => setNewTodoText(e.target.value)}
        placeholder="Add a new todo"
      />
      <button onClick={addTodo}>Add Todo</button>
      <button onClick={markAllCompleted}>Mark All Completed</button>

      <div>
        <button onClick={() => setFilter("all")}>All</button>
        <button onClick={() => setFilter("active")}>Active</button>
        <button onClick={() => setFilter("completed")}>Completed</button>
      </div>

      <div className="todo-list">
        {filteredTodos.map((todo) => (
          <TodoItem
            key={todo.id}
            todo={todo}
            onToggle={toggleTodo}
            onDelete={deleteTodo}
            onEdit={editTodo}
          />
        ))}
      </div>
    </div>
  );
};

export default TodoApp;
5. Final Touches
Now you have an enhanced Todo App with:

Persistence (using localStorage)
Edit functionality
Mark all completed
Filter functionality
